<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Chef | Mischa Taylor's Coding Blog]]></title>
  <link href="http://misheska.com/blog/categories/chef/atom.xml" rel="self"/>
  <link href="http://misheska.com/"/>
  <updated>2014-11-11T03:31:21-08:00</updated>
  <id>http://misheska.com/</id>
  <author>
    <name><![CDATA[Mischa Taylor]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Survey of Test Kitchen providers]]></title>
    <link href="http://misheska.com/blog/2014/09/21/survey-of-test-kitchen-providers/"/>
    <updated>2014-09-21T20:52:00-07:00</updated>
    <id>http://misheska.com/blog/2014/09/21/survey-of-test-kitchen-providers</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#introduction">Introduction</a></li>
  <li><a href="#desktop-virtualization">Desktop Virtualization</a>    <ul>
      <li><a href="#kitchen-vagrant-with-vmware-fusionvmware-workstation-desktop-virtualization">kitchen-vagrant with VMware Fusion/VMware Workstation desktop virtualization</a></li>
    </ul>
  </li>
  <li><a href="#test-kitchen-cloud-drivers">Test Kitchen Cloud Drivers</a>    <ul>
      <li><a href="#digitalocean-cloud-provider-kitchen-digitalocean">DigitalOcean Cloud Provider (kitchen-digitalocean)</a>        <ul>
          <li><a href="#kitchen-digitalocean-setup">kitchen-digitalocean Setup</a></li>
          <li><a href="#kitchen-digitalocean-kitchenyml-example">kitchen-digitalocean .kitchen.yml Example</a></li>
        </ul>
      </li>
      <li><a href="#amazon-ec2-cloud-provider-kitchen-ec2">Amazon EC2 Cloud Provider (kitchen-ec2)</a>        <ul>
          <li><a href="#kitchen-ec2-setup">kitchen-ec2 Setup</a></li>
          <li><a href="#kitchen-ec2-kitchenyml-example">kitchen-ec2 .kitchen.yml Example</a></li>
        </ul>
      </li>
      <li><a href="#google-compute-engine-cloud-provider-kitchen-gce">Google Compute Engine Cloud Provider (kitchen-gce)</a>        <ul>
          <li><a href="#kitchen-gce-setup">kitchen-gce Setup</a></li>
          <li><a href="#kitchen-gce-kitchenyml-example">kitchen-gce .kitchen.yml Example</a></li>
        </ul>
      </li>
      <li><a href="#rackspace-cloud-provider-kitchen-rackspace">Rackspace Cloud Provider (kitchen-rackspace)</a>        <ul>
          <li><a href="#kitchen-rackspace-setup">kitchen-rackspace Setup</a></li>
          <li><a href="#kitchen-rackspace-kitchenyml-example">kitchen-rackspace .kitchen.yml Example</a></li>
        </ul>
      </li>
    </ul>
  </li>
  <li><a href="#linux-container-drivers">Linux Container Drivers</a>    <ul>
      <li><a href="#docker-driver-kitchen-docker">Docker Driver (kitchen-docker)</a>        <ul>
          <li><a href="#chef-training-environment-setup">Chef Training Environment Setup</a></li>
          <li><a href="#kitchen-docker-setup">kitchen-docker Setup</a></li>
          <li><a href="#kitchen-docker-kitchenyml-example">kitchen-docker .kitchen.yml Example</a></li>
        </ul>
      </li>
    </ul>
  </li>
  <li><a href="#physical-machine-drivers">Physical Machine Drivers</a>    <ul>
      <li><a href="#driver-for-any-server-with-an-ssh-address-kitchen-ssh">Driver for any server with an SSH address (kitchen-ssh)</a>        <ul>
          <li><a href="#kitchen-ssh-kitchenyml-example">kitchen-ssh .kitchen.yml Example</a></li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<p><em>Update November 10, 2014</em>
* <em>Update for DigitalOcean 0.8x provider using API V2</em></p>

<h1 id="introduction">Introduction</h1>

<p>Test Kitchen supports a wide variety of different providers via Test Kitchen drivers besides the default <code>kitchen-vagrant</code> driver.  In this post, we’ll cover several popular alternatives.</p>

<p>Test Kitchen drivers are gem libraries available for download from http://rubygems.org .  Use the <code>kitchen driver discover</code> command to list all the Test Kitchen gems currently available.  Here is a list of all the Test Kitchen drivers as of this writing:</p>

<pre><code>$ kitchen driver discover
    Gem Name                          Latest Stable Release
    kitchen-all                       0.2.0
    kitchen-ansible                   0.0.1
    kitchen-azure                     0.1.0
    kitchen-bluebox                   0.6.2
    kitchen-cabinet                   3.0.0
    kitchen-cloudstack                0.10.0
    kitchen-digital_ocean             0.3.0
    kitchen-digitalocean              0.8.0
    kitchen-docker                    1.5.0
    kitchen-docker-api                0.4.0
    kitchen-driver-vagrant_provision  1.0.0
    kitchen-ec2                       0.8.0
    kitchen-fifo                      0.1.0
    kitchen-fog                       0.7.3
    kitchen-gce                       0.2.0
    kitchen-goiardi                   0.1.1
    kitchen-inspector                 1.3.0
    kitchen-joyent                    0.1.1
    kitchen-libvirtlxc                0.4.0
    kitchen-local                     0.0.1
    kitchen-lxc                       0.0.1
    kitchen-openstack                 1.6.0
    kitchen-puppet                    0.0.13
    kitchen-rackspace                 0.12.0
    kitchen-rightscale                0.1.0
    kitchen-salt                      0.0.19
    kitchen-scribe                    0.3.1
    kitchen-sharedtests               0.2.0
    kitchen-ssh                       0.0.4
    kitchen-sshgzip                   0.0.3
    kitchen-sync                      1.0.1
    kitchen-vagrant                   0.15.0
    kitchen-vagrant_sandbox           0.1.1
    kitchen-vagrant_winrm             0.1.1
    kitchen-zcloudjp                  0.5.0
    test-kitchen-provisioners         0.1
</code></pre>

<p>By default, Test Kitchen defaults to using the <code>kitchen-vagrant</code> driver.  When you run the <code>kitchen init</code> command to add Test Kitchen support to a project, you can add the <code>--driver=&lt;gem_name&gt;</code> option to have Test Kitchen generate configuration files using another driver of your choice.  For example, the following command would use the <code>kitchen-azure</code> driver:</p>

<pre><code>kitchen init --create-gemfile --driver=kitchen-azure
</code></pre>

<p>As shown in the following diagram the environments supported by Chef-releated drivers fall into four different categories: desktop virtual machines, public/private cloud providers, Linux containers and physical machines.  We’ll cover representative examples from each category in this appendix.</p>

<p><img class="center" src="/images/chapa01/tkdriver.004.png" title="[Test Kitchen driver architecture]" ></p>

<h1 id="desktop-virtualization">Desktop Virtualization</h1>

<p>Test Kitchen uses the <code>kitchen-vagrant</code> driver to work with desktop virtualization providers, like VirtualBox, VMWare Fusion, VMWare Workstation and Hyper-V.  Since the <code>kitchen-vagrant</code> driver is just a shim on top of Vagrant for Test Kitchen, any provider that Vagrant supports should be supported by the <code>kitchen-vagrant</code> driver.</p>

<p>It is important to clarify that as of this writing, the <code>kitchen-vagrant</code> driver assumes that the virtualization provider is installed locally on the host machine.  As shown in the following diagram, using the <code>kitchen-vagrant</code> driver, Test Kitchen creates a sandbox environment virtual machine locally on your host:</p>

<ol>
  <li>Test Kitchen invokes the <code>kitchen-vagrant</code> driver to create a virtual machine instance.</li>
  <li>In the case of the <code>kitchen-vagrant</code> driver, Vagrant itself contains all the logic to work with different types of virtualization software.  The <code>kitchen-vagrant</code> is just a small shim to allow Test Kitchen to use Vagrant to work with virtual machine instances.  In this example, Vagrant uses the VirtualBox API to spin up a virtual machine instance for our sandbox environment.</li>
  <li>Once the sandbox environment is running, Test Kitchen links the instance for communication.</li>
</ol>

<p><img class="center" src="/images/chapa01/tkdriver.001.png" title="[Sandbox environment creation with kitchen-vagrant]" ></p>

<p>Test Kitchen treats the data center versions of VMware, like vCenter/vSphere/ESXi as a cloud provider.  To Test Kitchen the data center editions are handled as if there were cloud instances, as vCenter/vSphere/ESXi merely a private cloud on a local LAN or corporate WAN instead of a public cloud over the Internet.  As of this writing, the <code>kitchen-openstack</code> and <code>kitchen-ssh</code> drivers support vSphere data center virtualization with Test Kitchen.</p>

<h2 id="kitchen-vagrant-with-vmware-fusionvmware-workstation-desktop-virtualization">kitchen-vagrant with VMware Fusion/VMware Workstation desktop virtualization</h2>

<p>You can use VMware desktop virutalization with <code>kitchen-varant</code> instead of Oracle VM VirtualBox.  It requires the purchase of the Vagrant VMware plugin from https://www.vagrantup.com/vmware which, at the time of this writing, costs USD $79 per seat.  The VMware plugin works with VMware Workstation 9 and 10 on Windows/Linux and VMware Fusion 5, 6 and 7 on Mac OS X.</p>

<p>On Mac OS X/Linux, you may have multiple virtualization solutions installed alongside VMware.  On these platforms, you can use both VMware and VirtualBox baseboxes at the same time, for example, if you have enough system resources.  On Windows, you must make a choice, as only one virtualization solution can be installed at a time.</p>

<p>Once you have purchased the VMware plugin and received a license file, you can install the Vagrant plugin and license with the following:</p>

<p>For VMware Workstation (on Windows/Linux):</p>

<pre><code>$ vagrant plugin install vagrant-vmware-workstation
$ vagrant plugin license vagrant-vmware-workstation license.lic
</code></pre>

<p>For VMware Fusion (on Mac OS X):</p>

<pre><code>$ vagrant plugin install vagrant-vmware-fusion
$ vagrant plugin license vagrant-vmware-fusion license.lic
</code></pre>

<p>After you install the VMware plugin and license file and want to use VMware, you’ll need to get VMware baseboxes.  Currently VirtualBox and VMware baseboxes are not interchangeable.</p>

<p>Once the VMware plugin and license has been installed, you’ll need to change your <code>.kitchen.yml</code> files slightly for VMware.  You can specify the VMware provider name in the <code>platforms</code> section of your <code>.kitchen.yml</code> file.</p>

<p>Modify the <code>.kitchen.yml</code> file, adding a <code>provider:</code> line to the <code>platforms</code> <code>driver</code> section.  If you are using VMware Workstation, use the <code>vmware_workstation</code> provider name.  For VMware Fusion, the provider name should be <code>vmware_fusion</code>.  You’ll also need to change the <code>box_url</code> line to point at a box file which has Vmware Tools installed, as box files are not guest tool agnostic.  For this book, box files have been provided for both VMware and VirtualBox via VagrantCloud, so you can use the same <code>box_url</code> line.</p>

<p>Synced folders work the same as with VirtualBox.  Just add a <code>synced_folders:</code> block to the <code>driver:</code> section with a list of folders to map between the guest and the host.  Each entry in the list contains an array with two parameters.  The first parameter is a path to the directory on the host machine.  If the path is relative, it is relative to the <code>.kitchen.yml</code> file.  The second parameter is an absolute path specifying where the folder is shared on the guest machine.  The <code>.kitchen.yml</code> examples that follow map the current working directory on the host to the directory <code>/vagrant</code> on the guest, like so:</p>

<pre><code>...
       synced_folders:
       - [".", "/vagrant"]
...
</code></pre>

<p>VMware Workstation <code>.kitchen.yml</code> example:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>vmware/workstation/.kitchen.yml  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'> <span class="err">—</span>
</span><span class='line'><span class="ss">driver</span><span class="p">:</span>
</span><span class='line'>  <span class="nb">name</span><span class="p">:</span> <span class="n">vagrant</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;provisioner:</span>
</span><span class='line'><span class="sr">  name: chef_solo&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="ss">platforms</span><span class="p">:</span>
</span><span class='line'>  <span class="o">-</span> <span class="nb">name</span><span class="p">:</span> <span class="n">centos65</span>
</span><span class='line'>    <span class="ss">driver</span><span class="p">:</span>
</span><span class='line'>      <span class="ss">provider</span><span class="p">:</span> <span class="n">vmware_workstation</span>
</span><span class='line'>      <span class="ss">box</span><span class="p">:</span> <span class="n">learningchef</span><span class="o">/</span><span class="n">centos65</span>
</span><span class='line'>      <span class="n">box_url</span><span class="p">:</span> <span class="n">learningchef</span><span class="o">/</span><span class="n">centos65</span>
</span><span class='line'>      <span class="n">synced_folders</span><span class="p">:</span>
</span><span class='line'>        <span class="o">-</span> <span class="o">[</span><span class="err">”</span><span class="o">.</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="o">/</span><span class="n">vagrant</span><span class="err">”</span><span class="o">]&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;suites:</span>
</span><span class='line'><span class="sr">  - name: default</span>
</span><span class='line'><span class="sr">    run_list:</span>
</span><span class='line'><span class="sr">    attributes:</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>VMware Fusion <code>.kitchen.yml</code> example:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>vmware/fusion/.kitchen.yml  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'> <span class="err">—</span>
</span><span class='line'><span class="ss">driver</span><span class="p">:</span>
</span><span class='line'>  <span class="nb">name</span><span class="p">:</span> <span class="n">vagrant</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;provisioner:</span>
</span><span class='line'><span class="sr">  name: chef_solo&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="ss">platforms</span><span class="p">:</span>
</span><span class='line'>  <span class="o">-</span> <span class="nb">name</span><span class="p">:</span> <span class="n">centos65</span>
</span><span class='line'>    <span class="ss">driver</span><span class="p">:</span>
</span><span class='line'>      <span class="ss">provider</span><span class="p">:</span> <span class="n">vmware_fusion</span>
</span><span class='line'>      <span class="ss">box</span><span class="p">:</span> <span class="n">learningchef</span><span class="o">/</span><span class="n">centos65</span>
</span><span class='line'>      <span class="n">box_url</span><span class="p">:</span> <span class="n">learningchef</span><span class="o">/</span><span class="n">centos65</span>
</span><span class='line'>      <span class="n">synced_folders</span><span class="p">:</span>
</span><span class='line'>        <span class="o">-</span> <span class="o">[</span><span class="err">”</span><span class="o">.</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="o">/</span><span class="n">vagrant</span><span class="err">”</span><span class="o">]&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;suites:</span>
</span><span class='line'><span class="sr">  - name: default</span>
</span><span class='line'><span class="sr">    run_list:</span>
</span><span class='line'><span class="sr">    attributes:</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Once you modify the <code>.kitchen.yml</code> file appropriately the <code>kitchen create</code>, <code>kitchen converge</code>, etc. commands will use VMware instead of VirtualBox:</p>

<pre><code>$ kitchen create default-centos65
-----&gt; Starting Kitchen (v1.2.2.dev)
-----&gt; Creating &lt;default-centos65&gt;...
       Bringing machine 'default' up with 'vmware_fusion' provider...
       ==&gt; default: Cloning VMware VM: 'learningchef/centos65'. This can take some time...
       ==&gt; default: Checking if box 'learningchef/centos65' is up to date...
       ==&gt; default: Verifying vmnet devices are healthy...
       ==&gt; default: Preparing network adapters...
       ==&gt; default: Fixed port collision for 22 =&gt; 2222. Now on port 2200.
       ==&gt; default: Starting the VMware VM...
       ==&gt; default: Waiting for the VM to finish booting...
       ==&gt; default: The machine is booted and ready!
       ==&gt; default: Forwarding ports...
           default: -- 22 =&gt; 2200
       ==&gt; default: Setting hostname...
       ==&gt; default: Configuring network adapters within the VM...
       ==&gt; default: Waiting for HGFS kernel module to load...
       ==&gt; default: Enabling and configuring shared folders...
           default: -- /Users/misheska/github/learningchef/learningchef-code/chapa01/vmware/fusion: /vagrant
       ==&gt; default: Machine not provisioning because `--no-provision` is specified.
       Vagrant instance &lt;default-centos65&gt; created.
       Finished creating &lt;default-centos65&gt; (0m39.42s).
-----&gt; Kitchen is finished. (0m39.66s)
</code></pre>

<h1 id="test-kitchen-cloud-drivers">Test Kitchen Cloud Drivers</h1>

<p>The following diagram shows how the Test Kitchen cloud drivers create a sandbox environment.  The main difference between using a cloud provider and desktop virtualization is that the sandbox environment lives remotely on another machine.  Test Kitchen communicates with the sandbox environment remotely over SSH, usually on the Internet.</p>

<ol>
  <li>Test Kitchen invokes the specified driver (like <code>kitchen-ec2</code>) to create an instance on the cloud provider.  Cloud provider drivers communicate with the cloud provider using the appropiate cloud API.  Normally this is an HTTP API. </li>
  <li>The cloud provider spins up an instance to serve as our sandbox environment.</li>
  <li>Once the sandbox environment is running, Test Kitchen links the instance to your local development workstation for remote communication, usually over SSH.  All Test Kitchen commands work with the remote sandbox environment transparently.  As far as the user experience with Test Kitchen goes, it behaves as if it were a local desktop virtualization environment.</li>
</ol>

<p><img class="center" src="/images/chapa01/tkdriver.005.png" title="[Test Kitchen driver architecture]" ></p>

<p>As of this writing, all of the Test Kitchen Cloud drivers do not support synchronized folders.  All <code>kitchen</code> commands automatically copy your project files to the sandbox environment, as Test Kitchen uses <code>scp</code> to transfer files from your host to the remote cloud instance.  For any other file sharing beyond what is supported by Test Kitchen, you’ll need to use a Cloud Provider-specific mechanism, such as Amazon Elastic Block Store (EBS).</p>

<h2 id="digitalocean-cloud-provider-kitchen-digitalocean">DigitalOcean Cloud Provider (kitchen-digitalocean)</h2>

<h3 id="kitchen-digitalocean-setup">kitchen-digitalocean Setup</h3>

<p>Go to https://cloud.digitalocean.com/settings/applications and click on the
<code>Generate new token</code> button to generate a new Personal Access Token using
the v2.0 API.  Make sure you check the optional <code>Write</code> scope when you
generate the token.  Write scope is necessary for the DigitalOcean Cloud
provider to function correctly.</p>

<p><img class="center" src="/images/chapa01/digitalocean_generate_token.png" title="[DigitalOcean New Personal Access Token]" ></p>

<p>Record the personal access token that is generated when you click on the
<code>Generate new token</code> button, as shown below:</p>

<p><img class="center" src="/images/chapa01/digitalocean_generate_new_token.png" title="[DigitalOcean Generate new token]" ></p>

<p>Add the new access token to your <code>~/.bash_profile</code> (or equivalent for your
platform) as the environment variable <code>DIGITALOCEAN_ACCESS_TOKEN</code>:</p>

<pre><code>export DIGITALOCEAN_ACCESS_TOKEN="1234567890abcdefg"
</code></pre>

<p>Collect SSH public keys from the computers which need access to your sandbox
instances.  Visit https://cloud.digitalocean.com/ssh_keys and add the SSH keys.
Once you’ve added the SSH keys(s), use the following <code>curl</code> command to get the
DigitalOcean SSH Key IDs:</p>

<pre><code>curl -X GET https://api.digitalocean.com/v2/account/keys -H "Authorization: Bearer $DIGITALOCEAN_ACCESS_TOKEN"
</code></pre>

<p>Record the <code>id</code> field for each of your SSH keys.  Add the list of SSH Key IDs
to the environment variable <code>DIGITALOCEAN_SSH_KEY_IDS</code>.  If you have more than
one SSH key ID, separate each ID by a comma followed by a space:</p>

<pre><code>export DIGITALOCEAN_SSH_KEY_IDS="12345, 67890"
</code></pre>

<p>Run the following <code>kitchen init</code> command to add Test Kitchen support to your project using the <code>kitchen-digitalocean</code> driver:</p>

<pre><code>$ kitchen init --driver=kitchen-digitalocean --create-gemfile
      create  .kitchen.yml
      create  test/integration/default
      create  Gemfile
      append  Gemfile
      append  Gemfile
You must run `bundle install' to fetch any new gems.
</code></pre>

<p>Run <code>bundle install</code> to download and install any required gems.</p>

<h3 id="kitchen-digitalocean-kitchenyml-example">kitchen-digitalocean .kitchen.yml Example</h3>

<p>As of the 0.8.x release, the <code>kitchen-digitalocean</code> provider automatically 
looks for the access token in the <code>DIGITAL_ACCESS_TOKEN</code> and the ssh key
IDs in the <code>DIGITALOCEAN_SSH_KEY_IDS</code> environment variables.  Since the
access token and SSH key IDs are sensitive information, it is recommended
that you store them in these environment variables instead of directly in
your <code>.kitchen.yml</code> file.  This way, you can share your <code>.kitchen.yml</code> file
with others and store it in source control.</p>

<p>Here is an example <code>kitchen.yml</code> which spins up a CentOS 6.5 sandbox environment, loading the Access Token and SSH Key IDs from corresponding environment variables:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>digitalocean/.kitchen.yml  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'> <span class="err">—</span>
</span><span class='line'><span class="ss">driver</span><span class="p">:</span>
</span><span class='line'>  <span class="nb">name</span><span class="p">:</span> <span class="n">digitalocean</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;provisioner:</span>
</span><span class='line'><span class="sr">  name: chef_zero&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="ss">platforms</span><span class="p">:</span>
</span><span class='line'>  <span class="o">-</span> <span class="nb">name</span><span class="p">:</span> <span class="n">centos65</span>
</span><span class='line'>    <span class="ss">driver</span><span class="p">:</span>
</span><span class='line'>      <span class="nb">name</span><span class="p">:</span> <span class="n">digitalocean</span>
</span><span class='line'>      <span class="ss">image</span><span class="p">:</span> <span class="n">centos</span><span class="o">-</span><span class="mi">6</span><span class="o">-</span><span class="mi">5</span><span class="o">-</span><span class="n">x64</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;suites:</span>
</span><span class='line'><span class="sr">  - name: default</span>
</span><span class='line'><span class="sr">    run_list:</span>
</span><span class='line'><span class="sr">    attributes:</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Before running any Test Kitchen commands, make sure you set the appropriate environment variables as shown below (with your own values):</p>

<p>Linux and Mac OS X:</p>

<pre><code>export DIGITALOCEAN_ACCESS_TOKEN="01234567890abcdef01234567890abcdef"
export DIGITALOCEAN_SSH_KEY_IDS="12345, 67890"
</code></pre>

<p>Windows Command Prompt:</p>

<pre><code>set DIGITALOCEAN_ACCESS_TOKEN=01234567890abcdef01234567890abcdef
set DIGITALOCEAN_SSH_KEY_IDS=12345, 67890
</code></pre>

<p>Windows Powershell:</p>

<pre><code>$env:DIGITALOCEAN_ACCESS_TOKEN="01234567890abcdef01234567890abcdef"
$env:DIGITALOCEAN_SSH_KEY_IDS="12345, 67890"
</code></pre>

<p>The output of <code>kitchen list</code> should resemble the following:</p>

<pre><code>$ kitchen list
Instance           Driver        Provisioner  Last Action
default-centos65  Digitalocean   ChefZero     &lt;Not Created&gt;
</code></pre>

<p>Spin up the node with <code>kitchen create</code>:</p>

<pre><code>$ kitchen create default-centos65
-----&gt; Starting Kitchen (v1.2.1)
-----&gt; Creating &lt;default-centos65&gt;...
       Digital Ocean instance &lt;3129943&gt; created.
       Waiting for 192.241.185.202:22...
       Waiting for 192.241.185.202:22...
       (ssh ready)

       Finished creating &lt;default-centos65&gt; (2m42.61s).
-----&gt; Kitchen is finished. (2m42.82s)
</code></pre>

<p>Install Chef Client with <code>kitchen setup</code>.  <code>kitchen destroy</code> will delete your Droplet on DigitalOcean.</p>

<p>Refer to the <code>kitchen-digitalocean</code> driver documentation on https://github.com/test-kitchen/kitchen-digitalocean for more information on additional <code>.kitchen.yml</code> settings.</p>

<h2 id="amazon-ec2-cloud-provider-kitchen-ec2">Amazon EC2 Cloud Provider (kitchen-ec2)</h2>

<h3 id="kitchen-ec2-setup">kitchen-ec2 Setup</h3>

<p>In order to use the <code>kitchen-ec2</code> driver, you’ll need to create an Amazon Web Services access key, consisting of an <em>access key ID</em> plus a <em>secret key</em>.  You can create a new <em>access key ID</em> and <em>secret _key</em> or retrieve an existing <em>access key ID</em> on the AWS Identity and Access Management (IAM) page in the AWS Console.  Once you select a user, click on the <em>Manage Access Keys</em> button as shown in the following:</p>

<p><img class="center" src="/images/chapa01/ec2_manage_access_keys.png" title="[AWS IAM Manage Access Keys]" ></p>

<p>In the Manage Access keys dialog, click on the <em>Create Access Key</em> button to create a new <em>access key ID</em> and <em>secret _key</em> as shown in the following:</p>

<p><img class="center" src="/images/chapa01/ec2_create_access_key.png" title="[AWS Create Access Key]" ></p>

<p>AWS will create your access key.  You can click on <em>Show User Security Credentials</em> to display the <em>Access Key ID</em> and the <em>Secret Access Key</em>.  Make note of these as this is the last time they will be displayed.  You can also click on the <em>Download Credentials</em> button to download the credentials as a <code>.csv</code> file as shown below:</p>

<p><img class="center" src="/images/chapa01/ec2_download_security_credentials.png" title="[Download Credentials]" ></p>

<p>Create a key pair to use when you launch instances.  Amazon EC2 supports a variety of ways to work with key pairs.  Refer to http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html for more information.</p>

<p>Make sure you set permissions on the key pair.  Otherwise <code>kitchen-ec2</code> will ignore the file.</p>

<pre><code>chmod 400 my-key-pair.pem
</code></pre>

<p>Run the following <code>kitchen init</code> command to add Test Kitchen support to your project using the <code>kitchen-ec2</code> driver:</p>

<pre><code>$ kitchen init --driver=kitchen-ec2 --create-gemfile
      create  .kitchen.yml
      create  test/integration/default
      create  Gemfile
      append  Gemfile
      append  Gemfile
You must run `bundle install' to fetch any new gems.
</code></pre>

<p>Run <code>bundle install</code> to fetch any new gems.</p>

<h3 id="kitchen-ec2-kitchenyml-example">kitchen-ec2 .kitchen.yml Example</h3>

<p>Since the Access Key ID, Secret Access Key and SSH Key ID contain sensitive information, it is recommended that you store these values in environment variables instead of directly in your <code>.kitchen.yml</code> file.  This way, you can share your <code>.kitchen.yml</code> file with others and store it in source control.  You can use embedded Ruby templates in a <code>.kitchen.yml</code> file to load values from the environment.  Here is an example <code>kitchen.yml</code> which spins up a CentOS 6.5 sandbox environment, loading the Access Key ID, Secret Acces Key and SSH Key ID from corresponding environment variables:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>ec2/.kitchen.yml  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'> <span class="err">—</span>
</span><span class='line'><span class="ss">driver</span><span class="p">:</span>
</span><span class='line'>  <span class="n">require_chef_omnibus</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'>  <span class="nb">name</span><span class="p">:</span> <span class="n">ec2</span>
</span><span class='line'>  <span class="n">aws_access_key_id</span><span class="p">:</span> <span class="err">“</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="sx">%= ENV[‘AWS_ACCESS_KEY_ID’]%&amp;gt;”</span>
</span><span class='line'><span class="sx">  aws_secret_access_key: “&amp;lt;%=</span> <span class="no">ENV</span><span class="o">[</span><span class="err">‘</span><span class="no">AWS_SECRET_ACCESS_KEY</span><span class="err">’</span><span class="o">]</span><span class="sx">%&amp;gt;”</span>
</span><span class='line'><span class="sx">  aws_ssh_key_id: “&amp;</span><span class="n">lt</span><span class="p">;</span><span class="sx">%= ENV[‘AWS_SSH_KEY_ID’]%&amp;gt;”</span>
</span><span class='line'><span class="sx">  ssh_key: “&amp;lt;%=</span> <span class="no">ENV</span><span class="o">[</span><span class="err">‘</span><span class="no">AWS_SSH_KEY</span><span class="err">’</span><span class="o">]%&amp;</span><span class="n">gt</span><span class="p">;</span><span class="err">”</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;provisioner:</span>
</span><span class='line'><span class="sr">  name: chef_solo&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="ss">platforms</span><span class="p">:</span>
</span><span class='line'>  <span class="o">-</span> <span class="nb">name</span><span class="p">:</span> <span class="n">centos65</span>
</span><span class='line'>    <span class="ss">driver</span><span class="p">:</span>
</span><span class='line'>      <span class="n">image_id</span><span class="p">:</span> <span class="n">ami</span><span class="o">-</span><span class="mi">8997</span><span class="n">afe0</span>
</span><span class='line'>      <span class="ss">username</span><span class="p">:</span> <span class="n">root</span>
</span><span class='line'>      <span class="ss">region</span><span class="p">:</span> <span class="n">us</span><span class="o">-</span><span class="n">east</span><span class="o">-</span><span class="mi">1</span>
</span><span class='line'>      <span class="n">availability_zone</span><span class="p">:</span> <span class="n">us</span><span class="o">-</span><span class="n">east</span><span class="o">-</span><span class="mi">1</span><span class="n">c</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;suites:</span>
</span><span class='line'><span class="sr">  - name: default</span>
</span><span class='line'><span class="sr">    run_list:</span>
</span><span class='line'><span class="sr">    attributes:</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Before running any Test Kitchen commands, make sure you set the appropriate environment variables as shown below (with your own values):</p>

<p>Linux and Mac OS X:</p>

<pre><code>export AWS_ACCESS_KEY_ID="ABCDEFGHI123JKLMNOPQ"
export AWS_SECRET_ACCESS_KEY="abcdefghijklmnopqrstuvwyz"
export AWS_SSH_KEY_ID="keyid1234"
export AWS_SSH_KEY="$HOME/ec2/$AWS_SSH_KEY_ID.pem"
</code></pre>

<p>Windows Command Prompt:</p>

<pre><code>set AWS_ACCESS_KEY_ID=ABCDEFGHI123JKLMNOPQ
set AWS_SECRET_ACCESS_KEY=abcdefghijklmnopqrstuvwyz
set AWS_SSH_KEY_ID=keyid1234
set AWS_SSH_KEY=%USERPROFILE%/ec2/%AWS_SSH_KEY_ID%.pem
</code></pre>

<p>Windows Powershell:</p>

<pre><code>$env:AWS_ACCESS_KEY_ID="ABCDEFGHI123JKLMNOPQ"
$env:AWS_SECRET_ACCESS_KEY="abcdefghijklmnopqrstuvwyz"
$env:AWS_SSH_KEY_ID="keyid1234"
$env:AWS_SSH_KEY="$env:userprofile/ec2/$env:aws_ssh_key_id.pem"
</code></pre>

<p>The output of <code>kitchen list</code> should resemble the following:</p>

<pre><code>$ kitchen list
Instance           Driver  Provisioner  Last Action
default-centos65  Ec2     ChefSolo     &lt;Not Created&gt;
</code></pre>

<p>Spin up the node with <code>kitchen create</code>:</p>

<pre><code>$ kitchen create default-centos65
-----&gt; Starting Kitchen (v1.2.2.dev)
-----&gt; Creating &lt;default-centos65&gt;...
       EC2 instance &lt;i-5b6f2b70&gt; created.
...........       (server ready)
       Waiting for ec2-54-197-34-184.compute-1.amazonaws.com:22...
       Waiting for ec2-54-197-34-184.compute-1.amazonaws.com:22...
       Waiting for ec2-54-197-34-184.compute-1.amazonaws.com:22...
       Waiting for ec2-54-197-34-184.compute-1.amazonaws.com:22...
       (ssh ready)\n
       Finished creating &lt;default-centos65&gt; (3m2.97s).
-----&gt; Kitchen is finished. (3m3.40s)
</code></pre>

<p>NOTE:</p>

<p>You may be prompted to opt in and accept the terms and subscribe to using the AWS Marketplace CentOS image the first time you spin up an image.  The <code>kitchen-ec2</code> driver will provide you with a link to the opt in URL.</p>

<p>NOTE:</p>

<p>You might not be able to create CentOS images in all availability zones.  The <code>kitchen-ec2</code> driver will advice you of your availability zone options if there is an issue with your availability zone choice.</p>

<p>Install Chef Client with <code>kitchen setup</code>.  <code>kitchen destroy</code> will delete your EC2 instance.</p>

<p>Refer to the <code>kitchen-ec2</code> driver documentation on https://github.com/test-kitchen/kitchen-ec2 for more information additional <code>.kitchen.yml</code> settings.</p>

<h2 id="google-compute-engine-cloud-provider-kitchen-gce">Google Compute Engine Cloud Provider (kitchen-gce)</h2>

<h3 id="kitchen-gce-setup">kitchen-gce Setup</h3>

<p>Create a Google Compute Engine project in the Google Developers Console at https://console.developers.google.com.  Create a Service Account Key by navigating to <em>APIs &amp; auth</em> &gt; <em>Credentials</em>.  Under OAuth start the process by clicking on the <em>CREATE NEW CLIENT ID</em> button as shown here:</p>

<p><img class="center" src="/images/chapa01/gce_create_new_client_id.png" title="[Create New Client ID]" ></p>

<p>On the <em>Create Client ID</em> dialog, choose <em>Service account</em> then click on <em>Create Client ID</em> as shown below.  This will generate a private key file along with a password.  Record this information, as it is the only time it will be displayed.</p>

<p><img class="center" src="/images/chapa01/gce_create_service_account.png" title="[Create Service Account]" ></p>

<p>Make note of the <em>Email address</em> field for the Service Account (not to be confused with the project owner’s Email Address at the top of the page) as shown in the following.  You’ll be recording this in the <code>google_client_email</code> field in the <code>.kitchen.yml</code>.</p>

<p><img class="center" src="/images/chapa01/gce_client_email.png" title="[Google Client Email]" ></p>

<p>If you do not already have an SSH key pair to login, create them using <code>ssh-keygen</code> or an equivalent tool.  Register the public key in the Google Developer Console.  The default file name for a public key is <code>$HOME/.ssh/id_rsa.pub</code>.  Navigate to <em>Compute</em> &gt; <em>Compute Engine</em> &gt; <em>Metadata</em> on the Google Developers Console.  Make sure the <em>SSH_keys</em> is selected in the panel on the right, then click on the <em>Add SSH key</em> button as shown in the following:</p>

<p><img class="center" src="/images/chapa01/gce_add_ssh_key.png" title="[Add SSH key to a GCE Project]" ></p>

<p>Copy the public key <code>id_rsa.pub</code> file contents to the clipboard and paste it into the <em>Enter entire key data</em> field.  Click on the <em>Done</em> button to save.</p>

<p><img class="center" src="/images/chapa01/gce_ssh_keys.png" title="[Register SSH Public Key]" ></p>

<p>Run the following <code>kitchen init</code> command to add Test Kitchen support to your project using the <code>kitchen-gce</code> driver:</p>

<pre><code>$ kitchen init --driver=kitchen-gce --create-gemfile
      create  .kitchen.yml
      create  test/integration/default
      create  Gemfile
      append  Gemfile
      append  Gemfile
You must run `bundle install' to fetch any new gems.
</code></pre>

<p>Run <code>bundle install</code> to fetch any new gems.</p>

<h3 id="kitchen-gce-kitchenyml-example">kitchen-gce .kitchen.yml Example</h3>

<p>Since the project, client e-mail and key location are sensitive information and differ between users, it is recommended that you store them in environment variables instead of directly in your <code>.kitchen.yml</code> file.  This way, you can share your <code>.kitchen.yml</code> file with others and store it in source control.  You can use an embedded Ruby template in a <code>.kitchen.yml</code> file to load values from the environment.  Here is an example <code>kitchen.yml</code> which spins up a CentOS 6.5 sandbox environment, loading the project and client e-mail from corresponding environment variables:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>gce/.kitchen.yml  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'> <span class="err">—</span>
</span><span class='line'><span class="ss">driver</span><span class="p">:</span>
</span><span class='line'>  <span class="nb">name</span><span class="p">:</span> <span class="n">gce</span>
</span><span class='line'>  <span class="n">google_project</span><span class="p">:</span> <span class="err">“</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="sx">%= ENV[‘GOOGLE_PROJECT’]%&amp;gt;”</span>
</span><span class='line'><span class="sx">  google_client_email: “&amp;lt;%=</span> <span class="no">ENV</span><span class="o">[</span><span class="err">‘</span><span class="no">GOOGLE_CLIENT_EMAIL</span><span class="err">’</span><span class="o">]</span><span class="sx">%&amp;gt;”</span>
</span><span class='line'><span class="sx">  google_key_location: “&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">%=</span> <span class="no">ENV</span><span class="o">[</span><span class="err">‘</span><span class="no">GOOGLE_KEY_LOCATION</span><span class="err">’</span><span class="o">]%&amp;</span><span class="n">gt</span><span class="p">;</span><span class="err">”</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;provisioner:</span>
</span><span class='line'><span class="sr">  name: chef_solo&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="ss">platforms</span><span class="p">:</span>
</span><span class='line'>  <span class="o">-</span> <span class="nb">name</span><span class="p">:</span> <span class="n">centos65</span>
</span><span class='line'>    <span class="ss">driver</span><span class="p">:</span> <span class="n">gce</span>
</span><span class='line'>      <span class="ss">area</span><span class="p">:</span> <span class="n">us</span>
</span><span class='line'>      <span class="n">image_name</span><span class="p">:</span> <span class="n">centos</span><span class="o">-</span><span class="mi">6</span><span class="o">-</span><span class="n">v20140619</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;suites:</span>
</span><span class='line'><span class="sr">  - name: default</span>
</span><span class='line'><span class="sr">    run_list:</span>
</span><span class='line'><span class="sr">    attributes:</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Before running any Test Kitchen commands, make sure you set the appropriate environment variables as shown below (with your own values):</p>

<p>Linux and Mac OS X:</p>

<pre><code>export GOOGLE_PROJECT="alpha-bravo-123"
export GOOGLE_CLIENT_EMAIL="123456789012@developer.gserviceaccount.com"
export GOOGLE_KEY_LOCATION="$HOME/gce/1234567890abcdef1234567890abcdef12345678-privatekey.p12"
</code></pre>

<p>Windows Command Prompt:</p>

<pre><code>set GOOGLE_PROJECT=alpha-bravo-123
set GOOGLE_CLIENT_EMAIL=123456789012@developer.gserviceaccount.com
set GOOGLE_KEY_LOCATION=%USERPROFILE%/gce/1234567890abcdef1234567890abcdef12345678-privatekey.p12
</code></pre>

<p>Windows Powershell:</p>

<pre><code>$env:GOOGLE_PROJECT="alpha-bravo-123"
$env:GOOGLE_CLIENT_EMAIL="123456789012@developer.gserviceaccount.com"
$env:GOOGLE_KEY_LOCATION="$env:userprofile/gce/1234567890abcdef1234567890abcdef12345678-privatekey.p12"
</code></pre>

<p>The output of <code>kitchen list</code> should resemble the following:</p>

<pre><code>$ kitchen list
Instance          Driver  Provisioner  Last Action
default-centos65  Gce     ChefSolo     &lt;Not Created&gt;
</code></pre>

<p>Spin up the node with <code>kitchen create</code>:</p>

<pre><code>$ kitchen create default-centos65
-----&gt; Starting Kitchen (v1.2.2.dev)
-----&gt; Creating &lt;default-centos65&gt;...
       GCE instance &lt;default-centos65-31681aab-e6a2-494b-99cb-9b920a1f6284&gt; created.
..       (server ready)
       (ssh ready)
       Finished creating &lt;default-centos65&gt; (1m26.70s).
-----&gt; Kitchen is finished. (1m28.18s)
</code></pre>

<p>Install Chef Client with <code>kitchen setup</code>.  <code>kitchen destroy</code> will delete your Google Compute Engine instance.</p>

<p>Refer to the <code>kitchen-gce</code> driver documentation on https://github.com/anl/kitchen-gce for more information on additional <code>.kitchen.yml</code> settings.</p>

<h2 id="rackspace-cloud-provider-kitchen-rackspace">Rackspace Cloud Provider (kitchen-rackspace)</h2>

<h3 id="kitchen-rackspace-setup">kitchen-rackspace Setup</h3>

<p>Login to the Cloud Sites Control Panel at https://manage.rackspacecloud.com/pages/Login.jsp  Navigate to <em>Your Account</em> &gt; <em>API Access</em> to display your username and API key as shown in below:</p>

<p><img class="center" src="/images/chapa01/rackspace_api_key_image.png" title="[Rackspace API Key]" ></p>

<p>Run the following <code>kitchen init</code> command to add Test Kitchen support to your project using the <code>kitchen-rackspace</code> driver:</p>

<pre><code>$ kitchen init --driver=kitchen-rackspace --create-gemfile
      create  .kitchen.yml
      create  test/integration/default
      create  Gemfile
      append  Gemfile
      append  Gemfile
You must run `bundle install' to fetch any new gems.
</code></pre>

<p>Run <code>bundle install</code> to fetch any new gems.</p>

<h3 id="kitchen-rackspace-kitchenyml-example">kitchen-rackspace .kitchen.yml Example</h3>

<p>Since the username and API Key are sensitive information and differ between users, it is recommended that you store them in environment variables instead of directly in your <code>.kitchen.yml</code> file.  This way, you can share your <code>.kitchen.yml</code> file with others and store it in source control.  You can use an embedded Ruby template in a <code>.kitchen.yml</code> file to load values from the environment.  Here is an example <code>kitchen.yml</code> which spins up a CentOS 6.5 sandbox environment, loading the project and client e-mail from corresponding environment variables:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>rackspace/.kitchen.yml  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'> <span class="err">—</span>
</span><span class='line'><span class="ss">driver</span><span class="p">:</span>
</span><span class='line'>  <span class="n">require_chef_omnibus</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'>  <span class="nb">name</span><span class="p">:</span> <span class="n">rackspace</span>
</span><span class='line'>  <span class="n">rackspace_username</span><span class="p">:</span> <span class="err">“</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="sx">%= ENV[‘RACKSPACE_USERNAME’]%&amp;gt;”</span>
</span><span class='line'><span class="sx">  rackspace_api_key: “&amp;lt;%=</span> <span class="no">ENV</span><span class="o">[</span><span class="err">‘</span><span class="no">RACKSPACE_API_KEY</span><span class="err">’</span><span class="o">]</span><span class="sx">%&amp;gt;”</span>
</span><span class='line'><span class="sx">  public_key_path: “&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">%=</span> <span class="no">ENV</span><span class="o">[</span><span class="err">‘</span><span class="no">RACKSPACE_PUBLIC_KEY_PATH</span><span class="err">’</span><span class="o">]%&amp;</span><span class="n">gt</span><span class="p">;</span><span class="err">”</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;provisioner:</span>
</span><span class='line'><span class="sr">  name: chef_solo&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="ss">platforms</span><span class="p">:</span>
</span><span class='line'>  <span class="o">-</span> <span class="nb">name</span><span class="p">:</span> <span class="n">centos65</span>
</span><span class='line'>    <span class="ss">driver</span><span class="p">:</span> <span class="n">rackspace</span>
</span><span class='line'>      <span class="n">image_id</span><span class="p">:</span> <span class="err">“</span><span class="mi">592</span><span class="n">c879e</span><span class="o">-</span><span class="n">f37d</span><span class="o">-</span><span class="mi">43</span><span class="n">e6</span><span class="o">-</span><span class="mi">8</span><span class="n">b54</span><span class="o">-</span><span class="mi">8</span><span class="n">c2d97cf04d4</span><span class="err">”</span>
</span><span class='line'>      <span class="n">flavor_id</span><span class="p">:</span> <span class="err">“</span><span class="n">performance1</span><span class="o">-</span><span class="mi">1</span><span class="err">”</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;suites:</span>
</span><span class='line'><span class="sr">  - name: default</span>
</span><span class='line'><span class="sr">    run_list:</span>
</span><span class='line'><span class="sr">    attributes:</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Before running any Test Kitchen commands, make sure you set the appropriate environment variables as shown below (with your own values):</p>

<p>Linux and Mac OS X:</p>

<pre><code>export RACKSPACE_USERNAME="alice"
export RACKSPACE_API_KEY="abcdef0123456789abcdef0123456789"
export RACKSPACE_PUBLIC_KEY_PATH="$HOME/.ssh/id_rsa.pub"
</code></pre>

<p>Windows Command Prompt:</p>

<pre><code>set RACKSPACE_USERNAME=alice
set RACKSPACE_API_KEY=abcdef0123456789abcdef0123456789
set RACKSPACE_PUBLIC_KEY_PATH=%USERPROFILE%/.ssh/id_rsa.pub
</code></pre>

<p>Windows Powershell:</p>

<pre><code>$env:RACKSPACE_USERNAME="alice"
$env:RACKSPACE_API_KEY="abcdef0123456789abcdef0123456789"
$env:RACKSPACE_PUBLIC_KEY_PATH="$env:userprofile/.ssh/id_rsa.pub"
</code></pre>

<p>The output of <code>kitchen list</code> should resemble the following:</p>

<pre><code>$ kitchen list
Instance          Driver     Provisioner  Last Action
default-centos65  Rackspace  ChefSolo     &lt;Not Created&gt;
</code></pre>

<p>Spin up the node with <code>kitchen create</code>:</p>

<pre><code>$ kitchen create default-centos65
-----&gt; Starting Kitchen (v1.2.2.dev)
-----&gt; Creating &lt;default-centos65&gt;...
       Rackspace instance &lt;9456b985-3a41-4cb0-a3cf-7536cc15baf7&gt; created.
       (server ready)
       (ssh ready)
       Finished creating &lt;default-centos65&gt; (0m37.77s).
-----&gt; Kitchen is finished. (0m38.21s)
</code></pre>

<p>Then install Chef Client with <code>kitchen setup</code>.  <code>kitchen destroy</code> will delete your instance on Rackspace.</p>

<p>Refer to the <code>kitchen-gce</code> driver documentation on https://github.com/test-kitchen/kitchen-rackspace for more information on additional <code>.kitchen.yml</code> settings.</p>

<h1 id="linux-container-drivers">Linux Container Drivers</h1>

<p>You can regard Linux Containers to be a resource-efficient variant of virtual machines.  As shown in the following diagram, Linux containers trade off the flexibility (and overhead) of being able to run different operating systems in each guest to minimize resource consumption by having all guests share the same OS kernel.  In container environments, guests are isolated like virtual machines using more lightweight mechanisms around Linux processes instead.</p>

<p><img class="center" src="/images/chapa01/tkdriver.006.png" title="[Virtual Machines versus Containers]" ></p>

<p>This idea has its origins in attempts to provide better process isolation to <em>chroot jails</em>.  <em>chroot</em> is a Unix command that facilitates creating a separate virtualized copy of the operating system by changing the apparent <em>root directory</em> (/) to processes running within this copy of the operating system.  Other variants of Unix have added extensions to this <em>chroot</em> mechanism to provide better isolation of the guest process, such as FreeBSD jails and Solaris Containers.  Linux Containers bring this process-based isolation mechanism to the standard Linux kernel via a recently added kernel feature called <em>control groups</em>.</p>

<p>As of this writing, there are no container-like Test Kitchen drivers for Windows.  Microsoft is working on adding similar lightweight virtualization technology to Windows via its Drawbridge virtalization technology[http://research.microsoft.com/en-us/projects/drawbridge/].  The only equivalent to Linux Containers in Windows at this moment is Microsoft Applications Virtualization (App-V), which has been around for quite some time, but it has a major drawback in requiring modification of target applications in order to work with the system, so it is not widely used.</p>

<p>The following diagram shows the steps in the sandbox environment creation process for containers.  It is identical to the host-based model presented previously, just using lightweight, isolated container processes instead of full-blown virtual machines.</p>

<ol>
  <li>Test Kitchen invokes the container driver (<code>kitchen-docker</code> or <code>kitchen-lxc</code>) to create a container instance.</li>
  <li>The Test Kitchen driver uses the operating system APIs for Linux Containers to create a new instance for our sandbox environment.</li>
  <li>Once the sandbox environment is running, Test Kitchen links the instance for communication.</li>
</ol>

<p><img class="center" src="/images/chapa01/tkdriver.007.png" title="[Sandbox environment creation with kitchen-docker]" ></p>

<p>As of this writing, Test Kitchen drivers for Linux Containers do not support functionality equivalent to synchronized folders.  All Test Kitchen commands use <code>scp</code> to transfer files from your host to the container instance.  For any other file sharing beyond what is supported by Test Kitchen, you’ll need to make direct use of the file sharing mechanisms provided by the container driver being used.  This is where Docker shines, as it supports data volume containers which bypass container image layering.  Data volume containers are an ideal way to share data between containers.  It is also possible to mount host directories in a container, but that has more limited use cases.  Refer to the documentation on your container provider for more information.</p>

<p>You can combine together virtual machines with Linux containers to use containers on platforms that do not have native container support, like Mac OS X and Windows.  The following diagram presents an overview of the setup.  With virtual machines, it is usually not possible to nest virtualization software instances.  Running virtualization software <em>inside</em> guest OS instances is either prohibited or painfully slow.  However, it’s perfectly fine to run Linux Containers within a virtual machine.  To the outer virtualization software, the container instances are merely Linux processes.</p>

<p><img class="center" src="/images/chapa01/tkdriver.003.png" title="[Docker running in a virtual machine]" ></p>

<p>In the next section on Docker, we’ll show you how to use this technique for readers running Mac OS X or Windows.  Neither platform supports Linux containers natively on the host.  Chef Software uses a Docker-based VM in training classes, so that students with laptops running Mac OS X or Windows can use the same setup as the students using Linux.  This approach also saves money, as Chef Software uses cloud providers for training, and these providers charge based the number of instances and resources used.  The lightweight Docker instances consume fewer resources and only require one running instance on the cloud provider - all the other instances are just lightweight container instances, which cloud providers (currently) do not charge extra.  You may want to consider using Linux Containers in a similar fashion to save money if you make heavy use of third-party virtualization or cloud providers, like we do.</p>

<h2 id="docker-driver-kitchen-docker">Docker Driver (kitchen-docker)</h2>

<p>If you are using Linux, refer to the Docker installation guide for instructions on how to install and configure Docker in your environment: http://www.docker.com/.</p>

<h3 id="chef-training-environment-setup">Chef Training Environment Setup</h3>

<p>Skip ahead to the next secion if you are using Linux and already have Docker installed.  Otherwise, you’ll need to spin up a virtual machine with Docker installed in order to play around with a container environment.</p>

<p>We’ve created a Chef training environment that has Docker and the Chef Development Kit used in this book preinstalled on a Linux virtual machine.  We use this same instance in official Chef training.  It’s also a handy environment for playing around with containers using Test Kitchen.</p>

<p>First, make sure you install Vagrant and VirtualBox or Vagrant and VMware.</p>

<p>Create a directory for the Chef training environment project called <code>chef</code> and make it the current directory.</p>

<pre><code>$ mkdir chef
$ cd chef
</code></pre>

<p>Add Test Kitchen support to the project using the default <code>kitchen-vagrant</code> driver by running <code>kitchen init</code>.  Then run <code>bundle install</code> to install the necessary gems for the Test Kitchen driver.</p>

<pre><code>$ kitchen init --create-gemfile
      create  .kitchen.yml
      create  test/integration/default
      create  Gemfile
      append  Gemfile
      append  Gemfile
You must run `bundle install' to fetch any new gems.

$ bundle install
Fetching gem metadata from https://rubygems.org/..........
Fetching additional metadata from https://rubygems.org/..
Resolving dependencies...
Using mixlib-shellout (1.4.0)
Using net-ssh (2.9.1)
Using net-scp (1.2.1)
Using safe_yaml (1.0.3)
Using thor (0.19.1)
Using test-kitchen (1.2.1)
Using kitchen-vagrant (0.15.0)
Using bundler (1.5.2)
Your bundle is complete!
Use `bundle show [gemname]` to see where a bundled gem is installed.
</code></pre>

<p>Modify the <code>.kitchen.yml</code> file to use the Chef training image as shown in the following <code>.kitchen.yml</code>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>chef/.kitchen.yml  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'> <span class="err">—</span>
</span><span class='line'><span class="ss">driver</span><span class="p">:</span>
</span><span class='line'>  <span class="nb">name</span><span class="p">:</span> <span class="n">vagrant</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;provisioner:</span>
</span><span class='line'><span class="sr">  name: chef_solo&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="ss">platforms</span><span class="p">:</span>
</span><span class='line'>  <span class="o">-</span> <span class="nb">name</span><span class="p">:</span> <span class="n">learningchef</span>
</span><span class='line'>    <span class="ss">driver</span><span class="p">:</span>
</span><span class='line'>      <span class="ss">box</span><span class="p">:</span> <span class="n">learningchef</span><span class="o">/</span><span class="n">cheftraining</span>
</span><span class='line'>      <span class="n">box_url</span><span class="p">:</span> <span class="n">learningchef</span><span class="o">/</span><span class="n">cheftraining</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;suites:</span>
</span><span class='line'><span class="sr">  - name: default</span>
</span><span class='line'><span class="sr">    run_list:</span>
</span><span class='line'><span class="sr">    attributes:</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Run <code>kitchen create</code> to spin up the image:</p>

<pre><code>$ kitchen create
-----&gt; Starting Kitchen (v1.2.2.dev)
-----&gt; Creating &lt;default-learningchef&gt;...
       Bringing machine 'default' up with 'virtualbox' provider...
       ==&gt; default: Importing base box 'learningchef/chefdk-box'...
       ==&gt; default: Matching MAC address for NAT networking...
       ==&gt; default: Checking if box 'learningchef/chefdk-box' is up to date...
       ==&gt; default: Setting the name of the VM: default-learningchef_default_1404728110875_23069
       ==&gt; default: Fixed port collision for 22 =&gt; 2222. Now on port 2200.
       ==&gt; default: Clearing any previously set network interfaces...
       ==&gt; default: Preparing network interfaces based on configuration...
           default: Adapter 1: nat
       ==&gt; default: Forwarding ports...
           default: 22 =&gt; 2200 (adapter 1)
       ==&gt; default: Booting VM...
       ==&gt; default: Waiting for machine to boot. This may take a few minutes...
           default: SSH address: 127.0.0.1:2200
           default: SSH username: vagrant
           default: SSH auth method: private key
           default: Warning: Remote connection disconnect. Retrying...
       ==&gt; default: Machine booted and ready!
       ==&gt; default: Checking for guest additions in VM...
       ==&gt; default: Setting hostname...
       ==&gt; default: Machine not provisioning because `--no-provision` is specified.
       Vagrant instance &lt;default-learningchef&gt; created.
       Finished creating &lt;default-learningchef&gt; (0m36.99s).
-----&gt; Kitchen is finished. (0m37.44s)
</code></pre>

<p>Then run <code>kitchen login</code> to use Docker!  Note that the image also has the latest Chef Development Kit installed (as of this writing).  You will be running the Test Kitchen Docker driver <em>inside</em> this virtual machine.  It has been pre-populated with all the necessary files to spin up the CentOS 6.5 images used in the exercises for this book:</p>

<pre><code>$ kitchen login
Welcome to Ubuntu 14.04 LTS (GNU/Linux 3.13.0-24-generic x86_64)

 * Documentation:  https://help.ubuntu.com/
Welcome to the Learning Chef training environment
Last login: Fri May 23 13:49:31 2014 from 10.0.2.2
vagrant@default-learningchef:~$ docker --version
Docker version 0.11.1, build fb99f99
vagrant@default-learningchef:~$ kitchen --version
Test Kitchen version 1.2.2.dev
vagrant@default-learningchef:~$
</code></pre>

<p>NOTE:</p>

<p>Sharp-eyed readers might notice that this is an Ubuntu image.  It is perfectly OK to spin up CentOS images on Ubuntu, as long as you use a version that shares the same kernel!</p>

<p>TIP:</p>

<p>At first, the multiple layers of instances might be a little confusing.  Refer back to the Docker diagram shown previously so that you can keep the big picture of this setup in mind.  Also, modifying the command prompts so they clearly indicate which environment is the VM and which environment is a container instance is strongly recommended.</p>

<h3 id="kitchen-docker-setup">kitchen-docker Setup</h3>

<p>Run the following <code>kitchen init</code> command to add Test Kitchen support to your project using the <code>kitchen-docker</code> driver:</p>

<pre><code>$ kitchen init --driver=kitchen-docker --create-gemfile
      create  .kitchen.yml
      create  test/integration/default
      create  Gemfile
      append  Gemfile
      append  Gemfile
You must run `bundle install' to fetch any new gems.
</code></pre>

<p>Run <code>bundle install</code> to download and install any required gems.</p>

<h3 id="kitchen-docker-kitchenyml-example">kitchen-docker .kitchen.yml Example</h3>

<p>The following <code>.kitchen.yml</code> presents an example which spins up a CentOS 6.5 sandbox environment:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>docker/.kitchen.yml  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'> <span class="err">—</span>
</span><span class='line'><span class="ss">driver</span><span class="p">:</span>
</span><span class='line'>  <span class="nb">name</span><span class="p">:</span> <span class="n">docker</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;provisioner:</span>
</span><span class='line'><span class="sr">  name: chef_solo&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="ss">platforms</span><span class="p">:</span>
</span><span class='line'>  <span class="o">-</span> <span class="nb">name</span><span class="p">:</span> <span class="n">centos65</span>
</span><span class='line'>    <span class="ss">driver</span><span class="p">:</span>
</span><span class='line'>      <span class="n">image_id</span><span class="p">:</span> <span class="mi">3448641</span>
</span><span class='line'>      <span class="n">region_id</span><span class="p">:</span> <span class="mi">4</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;suites:</span>
</span><span class='line'><span class="sr">  - name: default</span>
</span><span class='line'><span class="sr">    run_list:</span>
</span><span class='line'><span class="sr">    attributes:</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The output of <code>kitchen list</code> should resemble the following:</p>

<pre><code>$ kitchen list
Instance          Driver  Provisioner  Last Action
default-centos65  Docker  ChefSolo     &lt;Not Created&gt;
</code></pre>

<p>Spin up the node with <code>kitchen create</code>:</p>

<pre><code>$ kitchen create
-----&gt; Starting Kitchen (v1.2.2.dev)
-----&gt; Creating &lt;default-centos65&gt;...
       Step 0 : FROM centos:latest
       Pulling repository centos
        ---&gt; 0c752394b855
...
       Waiting for localhost:49153...
       Waiting for localhost:49153...
       Finished creating &lt;default-centos65&gt; (1m19.28s).
-----&gt; Kitchen is finished. (1m19.34s)
</code></pre>

<p>At the time of this writing, due to some issues with <code>kitchen-docker</code>, you may be prompted for <code>kitchen@localhost's password</code>.  The password is <code>kitchen</code></p>

<pre><code>$ kitchen login
kitchen@localhost's password: kitchen
Last login: Mon Jul  7 11:37:14 2014 from 172.17.42.1
[kitchen@55f29336b435 ~]$ cat /etc/redhat-release
CentOS release 6.5 (Final)
[kitchen@55f29336b435 ~]$ exit
logout
Connection to localhost closed.
</code></pre>

<p>Install Chef Client with <code>kitchen setup</code>.  <code>kitchen destroy</code> will delete container instance.</p>

<p>Refer to the <code>kitchen-docker</code> driver documentation on https://github.com/portertech/kitchen-docker for more information on additional <code>.kitchen.yml</code> settings.</p>

<h1 id="physical-machine-drivers">Physical Machine Drivers</h1>

<p>As of this writing, Test Kitchen does not currently support <code>chef-metal</code>.  It is currently planned to provide robust support for managing sandbox environments running on physical machines using <code>chef-metal</code> (though plans sometimes change).</p>

<p>Until Test Kitchen supports <code>chef-metal</code>, the only way to use Test Kitchen with physical machines currently (other than your local host) is to use the <code>kitchen-ssh</code> driver.  This is actually a generic way to integrate any kind of machine with Test Kitchen, not just physical machines.  As long as the machine accepts <code>ssh</code> connections, it will work.</p>

<p>The following diagram shows an overview of the Test Kitchen instance creation process using <code>kitchen-ssh</code>.  It is similar to the creation process used for cloud instances with the Test Kitchen environment being run on a remote machine, but there is only one step because an isolated sandbox instance is not created.  The <code>kitchen-ssh</code> driver merely links up an SSH communication channel with Test Kitchen in the remote machine’s host environment.</p>

<p><img class="center" src="/images/chapa01/tkdriver.008.png" title="[Sandbox environment creation with kitchen-ssh]" ></p>

<p>It is assumed that you are using some other method outside of Test Kitchen to be able to easily reset the environment.  Also, since it does not spin up a new instance, you will need to make sure the machine that you are linking to has CentOS 6 installed to match the exercises in this book.</p>

<h2 id="driver-for-any-server-with-an-ssh-address-kitchen-ssh">Driver for any server with an SSH address (kitchen-ssh)</h2>

<p>Run the following <code>kitchen init</code> command to add Test Kitchen support to your project using the <code>kitchen-ssh</code> driver:</p>

<pre><code>$ kitchen init --driver=kitchen-ssh --create-gemfile
      create  .kitchen.yml
      create  test/integration/default
      create  Gemfile
      append  Gemfile
      append  Gemfile
You must run `bundle install' to fetch any new gems.
</code></pre>

<p>Run <code>bundle install</code> to fetch any required gems.</p>

<h3 id="kitchen-ssh-kitchenyml-example">kitchen-ssh .kitchen.yml Example</h3>

<p>The following <code>.kitchen.yml</code> assumes that you are connecting to an existing CentOS 6.5 environment with an SSH server running.  Change the <code>hostname:</code>, <code>username:</code> and <code>password:</code> fields accordingly to match your remote machine’s settings:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>ssh/.kitchen.yml  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'> <span class="err">—</span>
</span><span class='line'><span class="ss">driver</span><span class="p">:</span>
</span><span class='line'>  <span class="nb">name</span><span class="p">:</span> <span class="n">ssh</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;provisioner:</span>
</span><span class='line'><span class="sr">  name: chef_solo&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="ss">platforms</span><span class="p">:</span>
</span><span class='line'>  <span class="o">-</span> <span class="nb">name</span><span class="p">:</span> <span class="n">centos65</span>
</span><span class='line'>    <span class="ss">driver</span><span class="p">:</span>
</span><span class='line'>      <span class="ss">hostname</span><span class="p">:</span> <span class="mi">192</span><span class="o">.</span><span class="mi">168</span><span class="o">.</span><span class="mi">33</span><span class="o">.</span><span class="mi">33</span>
</span><span class='line'>      <span class="ss">username</span><span class="p">:</span> <span class="n">alice</span>
</span><span class='line'>      <span class="ss">password</span><span class="p">:</span> <span class="n">averysecretpassword</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;suites:</span>
</span><span class='line'><span class="sr">  - name: default</span>
</span><span class='line'><span class="sr">    run_list:</span>
</span><span class='line'><span class="sr">    attributes:</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The output of <code>kitchen list</code> should resemble the following:</p>

<pre><code>Instance          Driver  Provisioner  Last Action
default-centos65  Ssh     ChefSolo     Created
</code></pre>

<p>Initiate a connection to the node with <code>kitchen create</code>.  You could also run <code>kitchen login</code> without needing to run <code>kitchen create</code> in this case, as <code>kitchen create</code> does nothing:</p>

<pre><code>$ kitchen create
-----&gt; Starting Kitchen (v1.2.2.dev)
-----&gt; Creating &lt;default-centos65&gt;...
       Kitchen-ssh does not start your server '192.168.33.33' but will look for an ssh connection with user 'alice'
---
       Kitchen-ssh found ssh ready on host '192.168.33.33' with user 'alice'

       Finished creating &lt;default-centos65&gt; (0m0.01s).
-----&gt; Kitchen is finished. (0m0.02s)
</code></pre>

<p>Install Chef Client with <code>kitchen setup</code>.  For this driver, <code>kitchen destroy</code> does nothing, just like <code>kitchen create</code>, besides updating the status in Test Kitchen.</p>

<p>Refer to the <code>kitchen-ssh</code> driver documentation on https://github.com/neillturner/kitchen-ssh/blob/master/lib/kitchen/driver/ssh.rb for more information on additional <code>.kitchen.yml</code> settings.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Set up a Sane Ruby Cookbook Authoring Environment for Chef on Mac OS X, Linux and Windows]]></title>
    <link href="http://misheska.com/blog/2013/12/26/set-up-a-sane-ruby-cookbook-authoring-environment-for-chef/"/>
    <updated>2013-12-26T23:32:00-08:00</updated>
    <id>http://misheska.com/blog/2013/12/26/set-up-a-sane-ruby-cookbook-authoring-environment-for-chef</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#mac-os-x">Mac OS X</a>    <ul>
      <li><a href="#install-the-xcode-command-line-tools---mac-os-x">Install the Xcode Command Line Tools - Mac OS X</a></li>
      <li><a href="#install-the-homebrew-package-manager---mac-os-x">Install the Homebrew Package Manager - Mac OS X</a></li>
      <li><a href="#install-apple-gcc-42---mac-os-x">Install Apple GCC 4.2 - Mac OS X</a></li>
      <li><a href="#install-chruby-and-ruby-build-via-homebrew---mac-os-x">Install Chruby and Ruby-Build via Homebrew - Mac OS X</a></li>
      <li><a href="#compile-ruby-19x-from-source---mac-os-x">Compile Ruby 1.9.x from source - Mac OS X</a></li>
      <li><a href="#install-bundler---mac-os-x">Install Bundler - Mac OS X</a></li>
      <li><a href="#install-sublime-text-3-optional---mac-os-x">Install Sublime Text 3 (Optional) - Mac OS X</a>        <ul>
          <li><a href="#create-subl-command-line-launch-link---mac-os-x">Create <code>subl</code> command line launch link - Mac OS X</a></li>
          <li><a href="#install-sublime-text-3-package-control-optional---mac-os-x">Install Sublime Text 3 Package Control (Optional) - Mac OS X</a></li>
          <li><a href="#install-sublime-chef-optional---mac-os-x">Install Sublime Chef (Optional) - Mac OS X</a></li>
        </ul>
      </li>
    </ul>
  </li>
  <li><a href="#linux">Linux</a>    <ul>
      <li><a href="#install-prerequisite-packages---linux">Install Prerequisite Packages - Linux</a>        <ul>
          <li><a href="#ubuntu-prerequisites">Ubuntu prerequisites:</a></li>
          <li><a href="#rhelcentos-prerequisites">RHEL/CentOS prerequisites:</a></li>
        </ul>
      </li>
      <li><a href="#install-chruby-and-ruby-build---linux">Install Chruby and Ruby-Build - Linux</a></li>
      <li><a href="#compile-ruby-19x-from-source---linux">Compile Ruby 1.9.x from source - Linux</a></li>
      <li><a href="#install-bundler---linux">Install Bundler - Linux</a></li>
      <li><a href="#install-sublime-text-3-optional---linux">Install Sublime Text 3 (Optional) - Linux</a>        <ul>
          <li><a href="#subl-command-line-launch-link---linux"><code>subl</code> command line launch link - Linux</a></li>
          <li><a href="#install-sublime-text-3-package-control-optional---linux">Install Sublime Text 3 Package Control (Optional) - Linux</a></li>
          <li><a href="#install-sublime-chef-optional---linux">Install Sublime Chef (Optional) - Linux</a></li>
        </ul>
      </li>
    </ul>
  </li>
  <li><a href="#windows">Windows</a>    <ul>
      <li><a href="#install-ruby-19x---windows">Install Ruby 1.9.x - Windows</a></li>
      <li><a href="#install-ruby-devkit---windows">Install Ruby DevKit - Windows</a></li>
      <li><a href="#enhance-rubies-to-use-the-devkit---windows">Enhance Rubies to use the DevKit - Windows</a></li>
      <li><a href="#install-bundler---windows">Install Bundler - Windows</a></li>
      <li><a href="#install-git---windows">Install Git - Windows</a></li>
      <li><a href="#install-sublime-text-3-optional---windows">Install Sublime Text 3 (Optional) - Windows</a>        <ul>
          <li><a href="#install-sublime-text-3-package-control-optional---windows">Install Sublime Text 3 Package Control (Optional) - Windows</a></li>
          <li><a href="#install-sublime-chef-optional---windows">Install Sublime Chef (Optional) - Windows</a></li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<p><em>Updated January 3, 2014</em></p>

<ul>
  <li><em>Added instructions to create <code>subl</code> launching commandlet</em></li>
</ul>

<p><em>Updated January 2, 2014</em></p>

<ul>
  <li><em>Per Seth Vargo switched from rbenv to chruby</em></li>
  <li><em>Switched from SublimeText 2 to SublimeText 3 - it works with SublimeChef</em></li>
</ul>

<p>You will need to set up a sane Ruby 1.9.x development to support your
Chef cookbook authoring activity on Mac OS X, Linux or Windows.  In this
Ruby environment, you will manage all the required Ruby Gem libraries
necessary to support Chef cookbook authoring.  The
<a href="https://learnchef.opscode.com/quickstart/workstation-setup/">LearnChef</a>
site recommends that you piggyback the Chef client’s omnibus Ruby
environment to start learning how to write Chef cookbooks.  This
article assumes that you want to go beyond the basics, where you’ll need
a Ruby environment dedicated for Chef cookbook development.</p>

<p>There are many different ways to set up a sane Ruby environment.  This
article covers how to set up a sane Ruby environment for Chef using
<a href="https://github.com/postmodern/chruby">Chruby</a> for Mac OS X/Linux and
<a href="http://rubyinstaller.org">RubyInstaller</a> for Windows.  The setup
covered in this article should work for most people wanting to write
Chef cookbooks.  If you are more experienced with Ruby development, you
may want to roll your own Ruby environment in another fashion.  The only
requirement is that Ruby 1.9.x must be used, the Chef client currently
does not support Ruby 2.x.</p>

<h1 id="mac-os-x">Mac OS X</h1>

<p>Out of the box, Ruby does not provide a mechanism to support multiple
installed versions.  <a href="https://github.com/postmodern/chruby">Chruby</a>
makes it easy to manage multiple versions of Ruby.  It’s a great way to set up
a dedicated Ruby 1.9.x environment with all the required Gem libraries for
Chef cookbook development.</p>

<hr />

<p><strong>NOTE:</strong> Before trying to install
<a href="https://github.com/postmodern/chruby">Chruby</a>
verify that you do not have another popular Ruby virtualization manager
installed - <a href="http://rvm.io">RVM</a>.  If you try to run the following <code>rvm</code>
command, it should say <code>command not found</code>:</p>

<pre><code>$ rvm --version
-bash: rvm: command not found
</code></pre>

<p>If you want to switch to Chruby (which is recommended), make sure that you
<a href="http://stackoverflow.com/questions/3558656/how-can-i-remove-rvm-ruby-version-manager-from-my-system">completely remove RVM first</a>
(as Chruby and RVM cannot coexist because RVM overrides the <code>gem</code> command with
a function specific to RVM).</p>

<hr />

<h2 id="install-the-xcode-command-line-tools---mac-os-x">Install the Xcode Command Line Tools - Mac OS X</h2>

<p>First you’ll need to install a C compiler and the Xcode Command Line tools
to build Ruby from source.  If you are using the latest version of Mac OS X
Mavericks 10.9, it has support for downloading the Xcode command line tools
directly from a Terminal window.  Run the following on a command line:</p>

<pre><code>$ xcode-select --install
</code></pre>

<p>You will be prompted to either click on <code>Install</code> to just install the command
line developer tools or click on <code>Get Xcode</code> to install both Xcode and the
command line developer tools.  It can be handy to have Xcode as well, but
it is a rather large multi-gigabyte download and not really necessary for
Ruby development.  So if you want to get going quickly, just click on the
<code>Install</code> button:</p>

<p><img class="center" src="/images/xcodeselect.png" title="xcode-select" ></p>

<p>If <code>xcode-select</code> installed the Xcode Command Line Tools, you should have
<code>git</code> installed (among other things).  Verify this with the following
command:</p>

<pre><code>$ git --version
git version 1.8.3.4 (Apple Git-47)
</code></pre>

<h2 id="install-the-homebrew-package-manager---mac-os-x">Install the Homebrew Package Manager - Mac OS X</h2>

<p>Next, you’ll need to install the <a href="http://brew.sh/">Homebrew package manager</a>
to get all the dependencies needed to compile Ruby from source.  While you
could manage these dependencies by hand, using a package manager is a better
idea, as package managers know how to uninstall what they install.</p>

<p>First verify that you <strong>DO NOT</strong> currently have homebrew installed.
<code>brew --version</code> should report <code>command not found</code>.</p>

<pre><code>$ brew --version
-bash: brew: command not found
</code></pre>

<p>If you already have Homebrew installed, just
<a href="http://misheska.com/blog/2013/06/15/using-rbenv-to-manage-multiple-versions-of-ruby/#upgrade-rbenv---mac-os-x">Update Homebrew and Rbenv</a>
and skip to the next section.</p>

<hr />

<p><strong>NOTE:</strong> Before trying to install <a href="http://brew.sh">Homebrew</a> verify that
you do not have another popular package manager installed - MacPorts.
If you try to run the following <code>port</code> command, it should say
<code>command not found</code>:</p>

<pre><code>$ port --version
-bash: port: command not found
</code></pre>

<p>If MacPorts is already installed, make sure that you
<a href="http://guide.macports.org/chunked/installing.macports.uninstalling.html">completely remove MacPorts from your system</a>
before trying to install Homebrew.</p>

<hr />

<p>Run the following command to install Homebrew:</p>

<pre><code>$ ruby -e "$(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)"
</code></pre>

<p>Run <code>brew doctor</code> and address any issues it discovers.  When
all is well, you should see:</p>

<pre><code>$ brew doctor
Your system is raring to brew.
</code></pre>

<h2 id="install-apple-gcc-42---mac-os-x">Install Apple GCC 4.2 - Mac OS X</h2>

<p>Next, install the additional dependencies to compile Ruby from source:</p>

<pre><code># For update-system
brew update
# Add the system duplicate formulae
brew tap homebrew/dupes
# Install legacy C compiler for building Ruby
brew install apple-gcc42
</code></pre>

<h2 id="install-chruby-and-ruby-build-via-homebrew---mac-os-x">Install Chruby and Ruby-Build via Homebrew - Mac OS X</h2>

<p>Now install <code>chruby</code> and <code>ruby-install</code> via Homebrew:</p>

<pre><code>$ brew update
$ brew install chruby
$ brew install ruby-build
</code></pre>

<p>Add <code>chruby.sh</code> to your shell to enable chruby:</p>

<pre><code>$ echo 'source /usr/local/share/chruby/chruby.sh' &gt;&gt; $HOME/.bash_profile
</code></pre>

<p>Add <code>auto.sh</code> to your shell to enble auto-switching of Rubies specified by
`.ruby-version files:</p>

<pre><code>$ echo 'source /usr/local/share/chruby/auto.sh' &gt;&gt; $HOME/.bash_profile
</code></pre>

<h2 id="compile-ruby-19x-from-source---mac-os-x">Compile Ruby 1.9.x from source - Mac OS X</h2>

<p>Install the latest version of ruby 1.9.x (at the time of this writing 1.9.3-p484)</p>

<pre><code>$ ruby-build 1.9.3-p484 --install-dir ~/.rubies/ruby-1.9.3-p484
</code></pre>

<p>Reload <code>.bashrc</code> with these new settings:</p>

<pre><code>$ source $HOME/.bash_profile    
</code></pre>

<p>To switch to the Ruby required for Chef:</p>

<pre><code>$ chruby ruby-1.9
</code></pre>

<p>To make this version the default version of Ruby, simply add this command
to your $HOME/.bash_profile</p>

<pre><code>$ echo 'chruby ruby-1.9' &gt;&gt; $HOME/.bash_profile
</code></pre>

<p>Verify the ruby install.  If everything was installed correctly, the <code>ruby -v</code>
command should report that version 1.9.3p484 is installed.</p>

<pre><code>$ ruby -v
ruby 1.9.3p484 (2013-11-22 revision 43786) [x86_64-darwin13.0.0]
</code></pre>

<h2 id="install-bundler---mac-os-x">Install Bundler - Mac OS X</h2>

<p>You’ll need to use <a href="http://gembundler.com/">Bundler</a> to manage gems.  Installing
a gem is also a good way to ensure that you’ve installed most of the Ruby
prerequisites.</p>

<p>First, make sure you update to the latest version of Rubygems:</p>

<pre><code>$ gem update --system
Updating rubygems-update
Fetching: rubygems-update-2.2.0.gem (100%)
Successfully installed rubygems-update-2.2.0
Installing RubyGems 2.2.0
RubyGems 2.2.0 installed
...
</code></pre>

<p>Then install the <code>bundler</code> gem.  If the <code>gem install</code> command reports
<code>Successfully installed</code> you’re good to go:</p>

<pre><code>$ gem install bundler
Successfully installed bundler-1.5.1
Parsing documentation for bundler-1.5.1
1 gem installed
</code></pre>

<h2 id="install-sublime-text-3-optional---mac-os-x">Install Sublime Text 3 (Optional) - Mac OS X</h2>

<p>Miguel Cabeça has written an excellent plugin for the Sublime Text editor
called <a href="https://github.com/cabeca/SublimeChef">SublimeChef</a>, which is the
closest thing to an Integrated Development Environment (IDE) that exists
for Chef.  Sublime Text costs $70 for a license, but has no restriction
on the length of a trial period, so feel free try out Sublime Text to see
if it works for you.</p>

<p>Download and install SublimeText 3 for your platform via
<a href="http://www.sublimetext.com/3">http://www.sublimetext.com/3</a></p>

<h3 id="create-subl-command-line-launch-link---mac-os-x">Create <code>subl</code> command line launch link - Mac OS X</h3>

<p>It is very handy to be able to launch Sublime Text from the command line
as you’ll find yourself going back and forth between the two in developing
your cookbooks.  Create a short-named link to the Sublime Text executable
with the following commands:</p>

<pre><code>$ sudo mkdir -p /usr/local/bin
$ sudo chown -R $(whoami) /usr/local/bin
$ ln -s /Applications/Sublime\ Text.app/Contents/SharedSupport/bin/subl /usr/local/bin/subl
</code></pre>

<p>Since <code>/usr/local/bin</code> should already bin your path, typing in the following 
command should launch Sublime Text:</p>

<pre><code>$ subl
</code></pre>

<p>You can pass in a filename parameter as well, such as:</p>

<pre><code>$ subl default.rb
</code></pre>

<h3 id="install-sublime-text-3-package-control-optional---mac-os-x">Install Sublime Text 3 Package Control (Optional) - Mac OS X</h3>

<p>In order to install the SublimeChef plugin, first you need to install
Sublime Text Package Control.</p>

<ul>
  <li>
    <p>Download <a href="https://sublime.wbond.net/Package%20Control.sublime-package">Package Control.sublime-package</a></p>
  </li>
  <li>
    <p>Choose <code>Preferences &gt; Browse Packages...</code> from the Sublime Text 3 menu</p>
  </li>
  <li>
    <p>Browse up a folder, then navigate into <code>Installed Packages/</code></p>
  </li>
  <li>
    <p>Copy <code>Package Control.sublime-package</code> file you downloaded into this
<code>Sublime Text 3\Installed Packages</code> directory</p>
  </li>
  <li>
    <p>Restart Sublime Text 3 to enable Package Control</p>
  </li>
</ul>

<p>Once Package Control is installed successfully, you should be able to
display the Command Palette by pressing <code>COMMAND+SHIFT+P</code>:</p>

<p><img class="center" src="/images/sublime3commandpalette-mac.png" title="[Sublime Text 3 Command Palette]" ></p>

<h3 id="install-sublime-chef-optional---mac-os-x">Install Sublime Chef (Optional) - Mac OS X</h3>

<p>After pressing <code>CTRL+SHIFT+P</code> to display the Command Palette, start typing
<code>install</code> to select <code>Package Control: Install Package</code>:</p>

<p><img class="center" src="/images/sublime3installpackagecontrol-mac.png" title="[Sublime Text 3 Package Control]" ></p>

<p>Then type <code>chef</code> to display the SublimeChef entry - click to install:</p>

<p><img class="center" src="/images/sublime3sublimechef-mac.png" title="[SublimeChef install]" ></p>

<p>Miguel created the following
<a href="http://www.youtube.com/watch?v=4VtDj_ar1Xg">demo video</a>
to show how SublimeChef can be used.</p>

<h1 id="linux">Linux</h1>

<h2 id="install-prerequisite-packages---linux">Install Prerequisite Packages - Linux</h2>
<p>Make sure the prerequisite packages are installed.</p>

<h3 id="ubuntu-prerequisites">Ubuntu prerequisites:</h3>

<pre><code>$ sudo apt-get update
$ sudo apt-get install -y build-essential git
$ sudo apt-get install -y libxml2-dev libxslt-dev libssl-dev
</code></pre>

<h3 id="rhelcentos-prerequisites">RHEL/CentOS prerequisites:</h3>

<pre><code>$ sudo yum update
$ sudo yum install -y git
$ sudo yum install -y gcc-c++ patch readline readline-devel zlib zlib-devel
$ sudo yum install -y libyaml-devel libffi-devel openssl-devel make bzip2
$ sudo yum install -y autoconf automake libtool bison
$ sudo yum install -y libxml2-devel libxslt-devel
</code></pre>

<h2 id="install-chruby-and-ruby-build---linux">Install Chruby and Ruby-Build - Linux</h2>

<p>Download the chruby source distribution:</p>

<pre><code>$ wget -O chruby-0.3.8.tar.gz https://github.com/postmodern/chruby/archive/v0.3.8.tar.gz
</code></pre>

<p>Extract chruby and install:</p>

<pre><code>$ tar xzvf chruby-0.3.8.tar.gz
$ cd chruby-0.3.8/
$ sudo make install
</code></pre>

<p>Feel free to remove the chruby source dir after installing:</p>

<pre><code>$ cd ..
$ rm chruby-0.3.8.tar.gz
$ rm -rf chruby-0.3.8
</code></pre>

<p>Install ruby-build:</p>

<pre><code>$ git clone https://github.com/sstephenson/ruby-build.git
$ cd ruby-build
$ sudo ./install.sh
</code></pre>

<p>Feel free to remove the ruby-build source dir after installing:</p>

<pre><code>$ cd ..
$ rm -rf ruby-build
</code></pre>

<p>Add <code>chruby.sh</code> to your shell to enable chruby:</p>

<pre><code>$ echo 'source /usr/local/share/chruby/chruby.sh' &gt;&gt; $HOME/.bashrc
</code></pre>

<p>Add <code>auto.sh</code> to your shell to enble auto-switching of Rubies specified by
`.ruby-version files:</p>

<pre><code>$ echo 'source /usr/local/share/chruby/auto.sh' &gt;&gt; $HOME/.bashrc
</code></pre>

<h2 id="compile-ruby-19x-from-source---linux">Compile Ruby 1.9.x from source - Linux</h2>

<p>Install the latest version of ruby 1.9.x (at the time of this writing 1.9.3-p484)</p>

<pre><code>$ ruby-build 1.9.3-p484 --install-dir ~/.rubies/ruby-1.9.3-p484
</code></pre>

<p>Reload <code>.bashrc</code> with these new settings:</p>

<pre><code>$ source $HOME/.bashrc
</code></pre>

<p>To switch to the Ruby required for Chef:</p>

<pre><code>$ chruby ruby-1.9
</code></pre>

<p>To make this version the default version of Ruby, simply add this command
to your $HOME/.bashrc</p>

<pre><code>$ echo 'chruby ruby-1.9' &gt;&gt; $HOME/.bashrc
</code></pre>

<p>Verify the ruby install.  If everything was installed correctly, the <code>ruby -v</code>
command should report that version 1.9.3p484 is installed.</p>

<pre><code>$ ruby -v
ruby 1.9.3p484 (2013-11-22 revision 43786) [x86_64-darwin13.0.0]
</code></pre>

<h2 id="install-bundler---linux">Install Bundler - Linux</h2>

<p>You’ll need to use <a href="http://gembundler.com/">Bundler</a> to manage gems.
Installing a gem is also a good way to ensure that you’ve installed most
of the Ruby prerequisites.</p>

<p>First, make sure you update to the latest version of Rubygems:</p>

<pre><code>$ gem update --system
Updating rubygems-update
Fetching: rubygems-update-2.2.0.gem (100%)
Successfully installed rubygems-update-2.2.0
Installing RubyGems 2.2.0
RubyGems 2.2.0 installed
...
</code></pre>

<p>Then install the <code>bundler</code> gem.  If the <code>gem install</code> command reports
<code>Successfully installed</code> you’re good to go:</p>

<pre><code>$ gem install bundler
Successfully installed bundler-1.5.0
Parsing documentation for bundler-1.5.0
1 gem installed
</code></pre>

<h2 id="install-sublime-text-3-optional---linux">Install Sublime Text 3 (Optional) - Linux</h2>

<p>Miguel Cabeça has written an excellent plugin for the Sublime Text editor
called <a href="https://github.com/cabeca/SublimeChef">SublimeChef</a>, which is the
closest thing to an Integrated Development Environment (IDE) that exists
for Chef.  Sublime Text costs $70 for a license, but has no restriction
on the length of a trial period, so feel free try out Sublime Text to see
if it works for you.</p>

<p>Download and install SublimeText 3 for your platform via
<a href="http://www.sublimetext.com/3">http://www.sublimetext.com/3</a></p>

<h3 id="subl-command-line-launch-link---linux"><code>subl</code> command line launch link - Linux</h3>

<p>Unlike with Mac OS X, the Linux installer should have created a
command line launch link for Sublime Text in <code>/usr/bin/subl</code>.
Typing in the following command should launch Sublime Text:</p>

<pre><code>$ subl
</code></pre>

<p>You can pass in a filename parameter as well, such as:</p>

<pre><code>$ subl default.rb
</code></pre>

<h3 id="install-sublime-text-3-package-control-optional---linux">Install Sublime Text 3 Package Control (Optional) - Linux</h3>

<p>In order to install the SublimeChef plugin, first you need to install
Sublime Text Package Control.</p>

<ul>
  <li>
    <p>Download <a href="https://sublime.wbond.net/Package%20Control.sublime-package">Package Control.sublime-package</a></p>
  </li>
  <li>
    <p>Choose <code>Preferences &gt; Browse Packages...</code> from the Sublime Text 3 menu</p>
  </li>
  <li>
    <p>Browse up a folder, then navigate into <code>Installed Packages/</code></p>
  </li>
  <li>
    <p>Copy <code>Package Control.sublime-package</code> file you downloaded into this
<code>Sublime Text 3/Installed Packages</code> directory</p>
  </li>
  <li>
    <p>Restart Sublime Text 3 to enable Package Control</p>
  </li>
</ul>

<p>Once Package Control is installed successfully, you should be able to
display the Command Pallete by pressing <code>CTRL+SHIFT+P</code>:</p>

<p><img class="center" src="/images/sublime3commandpalette-ubuntu.png" title="[Sublime Text 3 Command Palette]" ></p>

<h3 id="install-sublime-chef-optional---linux">Install Sublime Chef (Optional) - Linux</h3>

<p>After pressing <code>CTRL+SHIFT+P</code> to display the Command Pallette, start typing
<code>install</code> to select <code>Package Control: Install Package</code>:</p>

<p><img class="center" src="/images/sublime3installpackagecontrol.png" title="[Sublime Text 3 Package Control]" ></p>

<p>Then type <code>chef</code> to display the SublimeChef entry - click to install:</p>

<p><img class="center" src="/images/sublime3sublimechef-ubuntu.png" title="[SublimeChef install]" ></p>

<p>Miguel created the following
<a href="http://www.youtube.com/watch?v=4VtDj_ar1Xg">demo video</a>
to show how SublimeChef can be used.</p>

<h1 id="windows">Windows</h1>

<p>There is no need to install a Ruby version manager on Windows, like there
is for Mac OS X or Linux.  In fact, the chruby version manager does not
work on Windows.  Instead, you’ll use the 
<a href="http://rubyinstaller.org/">RubyInstaller for Windows</a> which
can install different versions of Ruby on the same machine.</p>

<h2 id="install-ruby-19x---windows">Install Ruby 1.9.x - Windows</h2>

<p>Download and install the latest Windows RubyInstaller for Ruby 1.9.x from
<a href="http://rubyinstaller.org/downloads">http://rubyinstaller.org/downloads</a>
(version 1.9.3-p484 as of this writing):</p>

<p><img class="center" src="/images/rubyinstaller.png" title="[RubyInstaller]" ></p>

<p>Verify that Ruby was installed correctly by running the following from a
Command Prompt:</p>

<pre><code>&gt; ruby -v
ruby 1.9.3p484 (2013-11-22) [i386-mingw32]
</code></pre>

<h2 id="install-ruby-devkit---windows">Install Ruby DevKit - Windows</h2>

<p>Download and install the Ruby Development Kit for use with Ruby 1.8.7 and
1.9.3.</p>

<p><img class="center" src="/images/devkit.png" title="[Ruby DevKit]" ></p>

<p>Extract the archive to <code>C:\Ruby\DevKit</code>:</p>

<p><img class="center" src="/images/devkitextract.png" title="[Extract DevKit to C:\Ruby\Devkit]" ></p>

<h2 id="enhance-rubies-to-use-the-devkit---windows">Enhance Rubies to use the DevKit - Windows</h2>

<p>Run <code>dk.rb init</code> to generate a <code>config.yml</code> which includes all the installed
Rubies to be enhanced to use the DevKit:</p>

<pre><code>&gt; cd /d c:\Ruby\DevKit
&gt; ruby dk.rb init
</code></pre>

<p>If you want to review the list of Rubies before installing, run
<code>dk.rb review</code>:</p>

<pre><code>&gt; cd /d c:\Ruby\DevKit
&gt; ruby dk.rb review
</code></pre>

<p>Then run <code>dk.rb</code> to DevKit enhance your installed Rubies:</p>

<pre><code>&gt; cd /d c:\Ruby\DevKit
&gt; ruby dk.rb install
</code></pre>

<p>Finally run <code>devkitvars</code> to add the DevKit tools to your command shell’s
PATH and try to get the version of <code>gcc</code> to verify that the tools
installed properly:</p>

<pre><code>&gt; c:\Ruby\DevKit\devkitvars.bat
Adding the DevKit to PATH...
&gt; gcc --version
gcc (tdm-1) 4.5.2
Copyright (C) 2010 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS OR A PARTICULAR PURPOSE.
</code></pre>

<h2 id="install-bundler---windows">Install Bundler - Windows</h2>

<p>You’ll need to use <a href="http://gembundler.com/">Bundler</a> to manage gems.  Installing
a gem is also a good way to ensure that you’ve installed most of the Ruby
prerequisites.</p>

<p>First, make sure you update to the latest version of Rubygems:</p>

<pre><code>&gt; c:\Ruby\DevKit\devkitvars.bat
Adding the DevKit to Path...
&gt; gem update --system
Fetching: rubygems-update-2.2.0.gem (100%)
Successfully installed ruygems-update-2.2.0
Installing RubyGems 2.2.0
RubyGems 2.2.0 installed
...
</code></pre>

<p>Then install the <code>bundler</code> gem.  If the <code>gem install</code> command reports
<code>Successfully installed</code> you’re good to go:</p>

<pre><code>&gt; gem install bundler
Successfully installed bundler-1.5.0
Parsing documentation for bundler-1.5.0
1 gem installed
</code></pre>

<h2 id="install-git---windows">Install Git - Windows</h2>

<p>While using source control is a recommended best practice, Chef does not
require Git.  If you use some other source control system besides Git,
feel free to install it instead of Git.  Use of Git source control just
happens to be more common than others with Chef.</p>

<p>Download the latest stable release of the Git for Windows install from
<a href="http://git-scm.com/downloads">http://git-scm.com/downloads</a></p>

<p><img class="center" src="/images/wingit.png" title="[Download for Windows]" ></p>

<p>Run the Git Windows install accepting the default choices, except on the
PATH setup dialog.  You’ll need to include the Unix tools on your Windows
command prompt for some Chef commands to work:</p>

<p><img class="center" src="/images/wingitunixtools.png" title="[Run Git and Included Unix tools from the Windows Command Prompt]" ></p>

<p>Verify that Git installed correcting by running the following on a command
prompt:</p>

<pre><code>&gt; git --version
git version 1.8.4.msysgit.0
</code></pre>

<h2 id="install-sublime-text-3-optional---windows">Install Sublime Text 3 (Optional) - Windows</h2>

<p>Miguel Cabeça has written an excellent plugin for the Sublime Text editor
called <a href="https://github.com/cabeca/SublimeChef">SublimeChef</a>, which is the
closest thing to an Integrated Development Environment (IDE) that exists
for Chef.  Sublime Text costs $70 for a license, but has no restriction
on the length of a trial period, so feel free try out Sublime Text to see
if it works for you.</p>

<p>Download and install SublimeText 3 for your platform via
<a href="http://www.sublimetext.com/3">http://www.sublimetext.com/3</a></p>

<h3 id="install-sublime-text-3-package-control-optional---windows">Install Sublime Text 3 Package Control (Optional) - Windows</h3>

<p>In order to install the SublimeChef plugin, first you need to install
Sublime Text Package Control.</p>

<ul>
  <li>
    <p>Download <a href="https://sublime.wbond.net/Package%20Control.sublime-package">Package Control.sublime-package</a></p>
  </li>
  <li>
    <p>Choose <code>Preferences &gt; Browse Packages...</code> from the Sublime Text 3 menu</p>
  </li>
  <li>
    <p>Browse up a folder, then navigate into <code>Installed Packages/</code></p>
  </li>
  <li>
    <p>Copy <code>Package Control.sublime-package</code> file you downloaded into this
<code>Sublime Text 3\Installed Packages</code> directory</p>
  </li>
  <li>
    <p>Restart Sublime Text 3 to enable Package Control</p>
  </li>
</ul>

<p>Once Package Control is installed successfully, you should be able to
display the Command Pallete by pressing <code>CTRL+SHIFT+P</code>:</p>

<p><img class="center" src="/images/sublime3commandpalette-win.png" title="[Sublime Text 3 Command Palette]" ></p>

<h3 id="install-sublime-chef-optional---windows">Install Sublime Chef (Optional) - Windows</h3>

<p>After pressing <code>CTRL+SHIFT+P</code> to display the Command Pallette, start typing
<code>install</code> to select <code>Package Control: Install Package</code>:</p>

<p><img class="center" src="/images/sublime3installpackagecontrol-win.png" title="[Sublime Text 3 Package Control]" ></p>

<p>Then type <code>chef</code> to display the SublimeChef entry - click to install:</p>

<p><img class="center" src="/images/sublime3sublimechef-win.png" title="[SublimeChef install]" ></p>

<p>Miguel created the following
<a href="http://www.youtube.com/watch?v=4VtDj_ar1Xg">demo video</a>
to show how SublimeChef can be used.</p>
]]></content>
  </entry>
  
</feed>
