---
layout: post
title: "Getting started writing Chef cookbooks the Berkshelf Way"
date: 2013-03-24 09:27
comments: true
categories: chef
---
Jamie Winsor hasn't yet updated his [guide to authoring cookbooks the Berkshelf way](http://vialstudios.com/guide-authoring-cookbooks.html)
to match [recent changes related to Vagrant 1.1](https://github.com/RiotGames/berkshelf/issues/416) and [Chef 11](http://www.opscode.com/blog/2013/03/11/chef-11-server-up-and-running/)
This post is an attempt to update these instructions, walking through his
and Sean O'Meara's example app - [MyFace](https://github.com/reset/myface-cookbook).
For more information on [Berkshelf](http://berkshelf.com/), check out his recent
[talk](https://my.adobeconnect.com/_a295153/p59b87of2dp/?launcher=false&fcsContent=true&pbMode=normal)
and [slides](http://www.slideshare.net/resetexistence/the-berkshelf-way)
from the March 14, 2013 Bay Area Chef meetup.

Getting Started
===============
* Install Ruby 1.9.x via [rvm](http://misheska.com/blog/2013/02/24/using-rbenv-to-manage-multiple-versions-of-ruby/) or [rbenv](http://misheska.com/blog/2013/02/24/using-rbenv-to-manage-multiple-versions-of-ruby/)

* [Install VirtualBox 4.2.x (or higher)](http://virtualbox.org)

* [Install Vagrant 1.1.x](http://vagrantup.com)

* Install the Berkshelf Vagrant Plugin (1.0.3 or higher)

```
$ vagrant plugin install berkshelf-vagrant
Installing the 'berkshelf-vagrant' plugin. This can take a few minutes...
Installed the plugin 'berkshelf-vagrant (1.0.6)'!
```

* Install Berkshelf

```
$ gem install berkshelf
```

Create the MyFace Application Cookbook
======================================
Key to the Berkshelf way is the use of the Application Cookbook Pattern.  An
application cookbook contains the list of recipes needed to build your
application or service.  As an example, this blog post will walk you through
the creation of an example service - MyFace - the next killer social web app.

First create a new cookbook for the MyFace application using the
`berks cookbook` command:

    $ berks cookbook myface
          create  myface/files/default
          create  myface/templates/default
          create  myface/attributes
          create  myface/definitions
          create  myface/libraries
          create  myface/providers
          create  myface/recipes
          create  myface/resources
          create  myface/recipes/default.rb
          create  myface/metadata.rb
          create  myface/LICENSE
          create  myface/README.md
          create  myface/Berksfile
          create  myface/chefignore
          create  myface/.gitignore
             run  git init from "./myface"
          create  myface/Gemfile
          create  myface/Vagrantfile
    Using myface (0.1.0) at path: '/Users/misheska/myface'

Run `bundle install` in the newly created cookbook directory to install the
necessary Gem dependencies:

    $ cd myface
    $ bundle install

Prepare a virtual machine for testing
=====================================
It's a good idea to develop your cookbook incrementally, testing 
in short iterations.  Berkshelf integrates with Vagrant to deploy
your cookbook changes to a virtual machine for testing.  

Edit the Vagrantfile generated by the `berks cookbook` command to use
a VirtualBox template that has Chef 11 installed.  (By default Berkshelf points
at an image with Chef 10).  Your Vagrantfile should look like this:

{% codeblock myface/Vagrantfile lang:ruby %}
Vagrant.configure("2") do |config|
  config.vm.hostname = "myface-berkshelf"
  config.vm.box = "opcode_centos-6.3_chef-11.2.0"
  config.vm.box_url = "https://opscode-vm.s3.amazonaws.com/vagrant/opscode_centos-6.3_chef-11.2.0.box"
  config.vm.network :private_network, ip: "33.33.33.10"
  config.ssh.max_tries = 40
  config.ssh.timeout = 120

  config.vm.provision :chef_solo do |chef|
    chef.json = {
      :mysql => {
        :server_root_password => 'rootpass',
        :server_debian_password => 'debpass',
        :server_repl_password => 'replpass'
      }
    }
    chef.run_list = [
      "recipe[myface::defult]"
    ]
  end
end
{% endcodeblock %}

Run `vagrant up` to start up the virtual machine and to test the stub MyFace
cookbook you just created:

    $ vagrant up
    Bringing machine 'default' up with 'virtualbox' provider...
    [default] Box 'opscode_centos-6.3_chef-11.2.0' was not found. Fetching box from specified URL for
    the provider 'virtualbox'. Note that if the URL does not have
    a box for this provider, you should interrupt Vagrant now and add
    the box yourself. Otherwise Vagrant will attempt to download the
    full box prior to discovering this error.
    Downloading with Vagrant::Downloaders::HTTP...
    Downloading box: https://opscode-vm.s3.amazonaws.com/vagrant/opscode_centos-6.3_chef-11.2.0.box
    Extracting box...
    Cleaning up downloaded box...
    Successfully added box 'opscode_centos-6.3_chef-11.2.0' with provider 'virtualbox'!
    [default] Importing base box 'opscode_centos-6.3_chef-11.2.0'...
    [default] Matching MAC address for NAT networking...
    [default] Setting the name of the VM...
    [default] Clearing any previously set forwarded ports...
    [Berkshelf] Updating Vagrant's berkshelf: '/Users/misheska/.berkshelf/vagrant/berkshelf-20130324-17246-9dysyo'
    [Berkshelf] Using myface (0.1.0) at path: '/Users/misheska/git/myface'
    [default] Creating shared folders metadata...
    [default] Clearing any previously set network interfaces...
    [default] Preparing network interfaces based on configuration...
    [default] Forwarding ports...
    [default] -- 22 => 2222 (adapter 1)
    [default] Booting VM...
    [default] Waiting for VM to boot. This can take a few minutes.
    [default] VM booted and ready for use!
    [default] Setting hostname...
    [default] Configuring and enabling network interfaces...
    [default] Mounting shared folders...
    [default] -- /vagrant
    [default] -- /tmp/vagrant-chef-1/chef-solo-1/cookbooks
    [default] Running provisioner: VagrantPlugins::Chef::Provisioner::ChefSolo...
    Generating chef JSON and uploading...
    Running chef-solo...
    [2013-03-24T21:21:56+00:00] INFO: *** Chef 11.2.0 ***
    [2013-03-24T21:21:57+00:00] INFO: Setting the run_list to ["recipe[myface::default]"] from JSON
    [2013-03-24T21:21:57+00:00] INFO: Run List is [recipe[myface::default]]
    [2013-03-24T21:21:57+00:00] INFO: Run List expands to [myface::default]
    [2013-03-24T21:21:57+00:00] INFO: Starting Chef Run for myface-berkshelf
    [2013-03-24T21:21:57+00:00] INFO: Running start handlers
    [2013-03-24T21:21:57+00:00] INFO: Start handlers complete.
    [2013-03-24T21:21:57+00:00] INFO: Chef Run complete in 0.0256688 seconds
    [2013-03-24T21:21:57+00:00] INFO: Running report handlers
    [2013-03-24T21:21:57+00:00] INFO: Report handlers complete

If all goes well, you should see `Chef Run complete` with no errors.

If you would ever like to delete your test virtual machine and start over,
you can destroy your test virtual machine with the `vagrant destroy` command:

    $ vagrant destroy
    Are you sure you want to destroy the 'default' VM? [y/N] y
    [default] Forcing shutdown of VM...
    [default] Destroying VM and associated drives...
    [Berkshelf] Cleaning Vagrant's berkshelf

Run `vagrant up` to recreate the test virtual machine.

__NOTE:__ If you just ran `vagrant destroy` make sure you run `vagrant up`
before proceeding to the next section.

Iteration #1: Create an application user
========================================
For our first short iteration, let's create a `myface` user under which
we'll run our application.  One best practice is to avoid running
applications as root and create a user/group under which the application runs
instead who has just enough rights that the app needs.

Edit `myface/recipes/default.rb` defining a new [Group Resource](http://docs.opscode.com/resource_group.html)
and [User Resource](http://docs.opscode.com/resource_user.html) for myface,
so it looks like the following:

{% codeblock myface/recipes/default.rb lang:ruby %}
#
# Cookbook Name:: myface
# Recipe:: default
#
# Copyright (C) 2013 YOUR_NAME
#
# All rights reserved - Do Not Redistribute
#

group "myface"

user "myface" do
  group "myface"
  system true
  shell "/bin/bash"
end
{% endcodeblock %}

Save `receipes/default.rb` and re-run `vagrant provision` to create the
myface user on your test virtual machine:

    $ vagrant provision
    [Berkshelf] Updating Vagrant's berkshelf: '/Users/misheska/.berkshelf/vagrant/berkshelf-20130324-19145-nf292v'
    [Berkshelf] Using myface (0.1.0) at path: '/Users/misheska/git/myface'
    [default] Running provisioner: VagrantPlugins::Chef::Provisioner::ChefSolo...
    Generating chef JSON and uploading...
    Running chef-solo...
    [2013-03-25T11:40:10+00:00] INFO: *** Chef 11.2.0 ***
    [2013-03-25T11:40:10+00:00] INFO: Setting the run_list to ["recipe[myface::default]"] from JSON
    [2013-03-25T11:40:10+00:00] INFO: Run List is [recipe[myface::default]]
    [2013-03-25T11:40:10+00:00] INFO: Run List expands to [myface::default]
    [2013-03-25T11:40:10+00:00] INFO: Starting Chef Run for myface-berkshelf
    [2013-03-25T11:40:10+00:00] INFO: Running start handlers
    [2013-03-25T11:40:10+00:00] INFO: Start handlers complete.
    [2013-03-25T11:40:10+00:00] INFO: Processing group[myface] action create (myface::default line 10)
    [2013-03-25T11:40:10+00:00] INFO: group[myface] created
    [2013-03-25T11:40:10+00:00] INFO: Processing user[myface] action create (myface::default line 12)
    [2013-03-25T11:40:10+00:00] INFO: user[myface] created
    [2013-03-25T11:40:10+00:00] INFO: Chef Run complete in 0.085739737 seconds
    [2013-03-25T11:40:10+00:00] INFO: Running report handlers
    [2013-03-25T11:40:10+00:00] INFO: Report handlers complete

Again, you should expect to see the Chef run complete with no errors.  Notice
that it also creates `group[myface]` and `user[myface]`.

Verify that Chef actually created the myface user on our test virtual
machine by running the following:

    $ vagrant ssh -c "getent passwd myface"
    myface:x:497:1001::/home/myface:/bin/bash

We use `vagrant ssh -c` to run a command on our test virtual machine.  The
`getent` command can be used to query all user databases.  In this
case we're looking for `myface`, and it exists!

Because we are using well-defined resources that are completely
[idempotent](http://en.wikipedia.org/wiki/Idempotence), you should notice
that if you run `vagrant provision` again, the Chef run executes more quickly
and it does not try to re-create the user/group it already created.

    $ vagrant provision
    [Berkshelf] Updating Vagrant's berkshelf: '/Users/misheska/.berkshelf/vagrant/berkshelf-20130324-19145-nf292v'
    [Berkshelf] Using myface (0.1.0) at path: '/Users/misheska/git/myface'
    [default] Running provisioner: VagrantPlugins::Chef::Provisioner::ChefSolo...
    Generating chef JSON and uploading...
    Running chef-solo...
    [2013-03-25T11:50:03+00:00] INFO: *** Chef 11.2.0 ***
    [2013-03-25T11:50:04+00:00] INFO: Setting the run_list to ["recipe[myface::default]"] from JSON
    [2013-03-25T11:50:04+00:00] INFO: Run List is [recipe[myface::default]]
    [2013-03-25T11:50:04+00:00] INFO: Run List expands to [myface::default]
    [2013-03-25T11:50:04+00:00] INFO: Starting Chef Run for myface-berkshelf
    [2013-03-25T11:50:04+00:00] INFO: Running start handlers
    [2013-03-25T11:50:04+00:00] INFO: Start handlers complete.
    [2013-03-25T11:50:04+00:00] INFO: Processing group[myface] action create (myface::default line 10)
    [2013-03-25T11:50:04+00:00] INFO: Processing user[myface] action create (myface::default line 12)
    [2013-03-25T11:50:04+00:00] INFO: Chef Run complete in 0.028070063 seconds
    [2013-03-25T11:50:04+00:00] INFO: Running report handlers
    [2013-03-25T11:50:04+00:00] INFO: Report handlers complete

Iteration #2 - Refactor the user name and group name into attributes
====================================================================
What if at some point you wanted to change the name of the `myface` user/group
you just created to something else?  At the moment, you would need to edit
`myface/recipes/default.rb` in three places.

Let's create a new file called `myface/attributes/default.rb` which
initializes Chef [attributes](http://docs.opscode.com/essentials_cookbook_attribute_files.html)
defining the user name and group name under which our application will run so
that you [don't repeat yoursef](http://en.wikipedia.org/wiki/Don't_repeat_yourself).

{% codeblock myface/attributes/default.rb lang:ruby %}
default[:myface][:user] = "myface"
default[:myface][:group] = "myface"
{% endcodeblock %}

In Chef, attributes are a hash of a hash used to override the default settings
on a node.  The first hash is the cookbook name - in our
case we've named our cookbook `:myface`. The second hash is the name of
our attribute - in this case, we're defining two new attributes: `:user` and
`:group`.

`default` implies the use of the [node object](http://docs.opscode.com/chef/essentials_node_object.html)
`node.default` and is a Chef attribute file shorthand.  The following are
equivalent definitions to the ones above:

    node.default[:myface][:user] = "myface"
    noce.default[:myface][:user] = "myface"

Also note the use of symbols instead of strings.  It is [strongly recommended
that you use symbols instead of strings](http://www.robertsosinski.com/2009/01/11/the-difference-between-ruby-symbols-and-strings/)
for hash indexes. 

Now that you've created your attribute definitions, edit
`myface/recipes/default.rb` and replace all references to the "myface" user name
with `node[:myface][:user]` and all references to the "myface" group with
`node[:myface][:group]`.  `myface/recipes/default.rb` should now look like
this:

{% codeblock myface/attributes/default.rb lang:ruby %}
#
# Cookbook Name:: myface
# Recipe:: default
#
# Copyright (C) 2013 YOUR_NAME
#
# All rights reserved - Do Not Redistribute
#

group node[:myface][:group]

user node[:myface][:user] do
  group node[:myface][:group]
  system true
  shell "/bin/bash"
end
{% endcodeblock %}

Re-provision with `vagrant provision` to see how the refactor went:

    $ vagrant provision
    [Berkshelf] Updating Vagrant's berkshelf: '/Users/misheska/.berkshelf/vagrant/berkshelf-20130325-20447-1lz0yjk'
    [Berkshelf] Using myface (0.1.0) at path: '/Users/misheska/git/myface'
    [default] Running provisioner: VagrantPlugins::Chef::Provisioner::ChefSolo...
    Generating chef JSON and uploading...
    Running chef-solo...
    [2013-03-25T12:56:23+00:00] INFO: *** Chef 11.2.0 ***
    [2013-03-25T12:56:23+00:00] INFO: Setting the run_list to ["recipe[myface::default]"] from JSON
    [2013-03-25T12:56:23+00:00] INFO: Run List is [recipe[myface::default]]
    [2013-03-25T12:56:23+00:00] INFO: Run List expands to [myface::default]
    [2013-03-25T12:56:23+00:00] INFO: Starting Chef Run for myface-berkshelf
    [2013-03-25T12:56:23+00:00] INFO: Running start handlers
    [2013-03-25T12:56:23+00:00] INFO: Start handlers complete.
    [2013-03-25T12:56:23+00:00] INFO: Processing group[myface] action create (myface::default line 10)
    [2013-03-25T12:56:23+00:00] INFO: Processing user[myface] action create (myface::default line 12)
    [2013-03-25T12:56:23+00:00] INFO: Chef Run complete in 0.031634516 seconds
    [2013-03-25T12:56:23+00:00] INFO: Running report handlers
    [2013-03-25T12:56:23+00:00] INFO: Report handlers complete

As long as you didn't create any syntax errors in your refactoring file edits,
there should be no net change on the virtual machine test node (as you've only
just moved some strings into a node attribute).  Running  `getent` on the
test virtual machine should also produce the same result:

    $ vagrant ssh -c "getent passwd myface"
    myface:x:497:1001::/home/myface:/bin/bash

Iteration #3 - Install MySQL
============================
Myface will be storing account information in a persistent database.  Let's
install MySQL.

Modify `myface/recipes/default.rb` to include the MySQL cookbook's server
recipe:

    include_recipe "mysql::server"

The resultant `myface/attributes/default.rb` file should look like so:

{% codeblock myface/attributes/default.rb lang:ruby %}
#
# Cookbook Name:: myface
# Recipe:: default
#
# Copyright (C) 2013 YOUR_NAME
#
# All rights reserved - Do Not Redistribute
#

group node[:myface][:group]

user node[:myface][:user] do
  group node[:myface][:group]
  system true
  shell "/bin/bash"
end

include_recipe "mysql::server"
{% endcodeblock %}

Since you are loading MySQL from another cookbook, you need to configure the
dependency in your metadata.  Edit `myface/metadata.rb` and add the `mysql`
dependency at the bottom:

    depends "mysql", "~> 1.3.0"

This tells Chef that the myface cookbook depends on the mysql cookbook.
We've also specified a version constraint using the optimistic operator
`~>` to tell our Chef that we want the latest version of the mysql cookbook
that is greater than 1.3.0 but *not* 1.4.0 or higher.

It is recommended that Chef cookbooks follow a
[Semantic Versioning](http://semver.org/) scheme.  So if you write your
cookbook to use the latest mysql 1.3.x cookbook, if the mysql cookbook is
ever bumped to a 1.4.x version (or 2.x), it has some public API functionality
that has at least been deprecated.  So you'll want to review the changes and
test before automatically using a mysql cookbook version 1.4.x or higher.
However, automatic use of any new 1.3.x is perfectly fine, because no
only backwards-compatible bug fixes has been introduced.  There are no
changes in the public APIs.

Your `myface/metadata.rb` should look like this:

{% codeblock myface/attributes/default.rb lang:ruby %}
name             "myface"
maintainer       "YOUR_NAME"
maintainer_email "YOUR_EMAIL"
license          "All rights reserved"
description      "Installs/Configures myface"
long_description IO.read(File.join(File.dirname(__FILE__), 'README.md'))
version          "0.1.0"

depends "mysql", "~> 1.3.0"
{% endcodeblock %}

Now when you re-run `vagrant provision` it will install MySQL on your
test virtual machine:

    [Berkshelf] Updating Vagrant's berkshelf: '/Users/misheska/.berkshelf/vagrant/berkshelf-20130325-20447-1lz0yjk'
    [Berkshelf] Using myface (0.1.0) at path: '/Users/misheska/git/myface'
    [Berkshelf] Using mysql (1.3.0)
    [Berkshelf] Using openssl (1.0.2)
    [Berkshelf] Using build-essential (1.3.4)
    [default] Running provisioner: VagrantPlugins::Chef::Provisioner::ChefSolo...
    Generating chef JSON and uploading...
    Running chef-solo...
    [2013-03-27T04:57:19+00:00] INFO: *** Chef 11.2.0 ***
    [2013-03-27T04:57:20+00:00] INFO: Setting the run_list to ["recipe[myface::default]"] from JSON
    [2013-03-27T04:57:20+00:00] INFO: Run List is [recipe[myface::default]]
    [2013-03-27T04:57:20+00:00] INFO: Run List expands to [myface::default]
    [2013-03-27T04:57:20+00:00] INFO: Starting Chef Run for myface-berkshelf
    [2013-03-27T04:57:20+00:00] INFO: Running start handlers
    [2013-03-27T04:57:20+00:00] INFO: Start handlers complete.
    [2013-03-27T04:57:20+00:00] INFO: Could not find previously defined grants.sql resource
    [2013-03-27T04:57:20+00:00] INFO: Processing group[myface] action create (myface::default line 10)
    [2013-03-27T04:57:20+00:00] INFO: Processing user[myface] action create (myface::default line 12)
    [2013-03-27T04:57:20+00:00] INFO: Processing package[mysql] action install (mysql::client line 46)
    [2013-03-27T04:57:47+00:00] INFO: package[mysql] installing mysql-5.1.67-1.el6_3 from updates repository
    [2013-03-27T04:57:56+00:00] INFO: Processing package[mysql-devel] action install (mysql::client line 46)
    [2013-03-27T04:57:56+00:00] INFO: package[mysql-devel] installing mysql-devel-5.1.67-1.el6_3 from updates repository
    [2013-03-27T04:58:03+00:00] INFO: Processing package[mysql-server] action install (mysql::server line 78)
    [2013-03-27T04:58:03+00:00] INFO: package[mysql-server] installing mysql-server-5.1.67-1.el6_3 from updates repository
    [2013-03-27T04:58:20+00:00] INFO: Processing directory[/etc/mysql/conf.d] action create (mysql::server line 85)
    [2013-03-27T04:58:20+00:00] INFO: directory[/etc/mysql/conf.d] created directory /etc/mysql/conf.d
    [2013-03-27T04:58:20+00:00] INFO: directory[/etc/mysql/conf.d] owner changed to 27
    [2013-03-27T04:58:20+00:00] INFO: directory[/etc/mysql/conf.d] group changed to 27
    [2013-03-27T04:58:20+00:00] INFO: Processing service[mysql] action nothing (mysql::server line 105)
    [2013-03-27T04:58:20+00:00] INFO: Processing template[/etc/my.cnf] action create (mysql::server line 125)
    [2013-03-27T04:58:20+00:00] INFO: template[/etc/my.cnf] backed up to /var/chef/backup/etc/my.cnf.chef-20130327045820
    [2013-03-27T04:58:20+00:00] INFO: template[/etc/my.cnf] updated content
    [2013-03-27T04:58:20+00:00] INFO: template[/etc/my.cnf] owner changed to 0
    [2013-03-27T04:58:20+00:00] INFO: template[/etc/my.cnf] group changed to 0
    [2013-03-27T04:58:20+00:00] INFO: template[/etc/my.cnf] mode changed to 644
    [2013-03-27T04:58:20+00:00] INFO: template[/etc/my.cnf] sending restart action to service[mysql] (immediate)
    [2013-03-27T04:58:20+00:00] INFO: Processing service[mysql] action restart (mysql::server line 105)
    [2013-03-27T04:58:21+00:00] INFO: service[mysql] restarted
    [2013-03-27T04:58:21+00:00] INFO: Processing execute[assign-root-password] action run (mysql::server line 155)
    [2013-03-27T04:58:21+00:00] INFO: execute[assign-root-password] ran successfully
    [2013-03-27T04:58:21+00:00] INFO: Processing template[/etc/mysql_grants.sql] action create (mysql::server line 179)
    [2013-03-27T04:58:22+00:00] INFO: template[/etc/mysql_grants.sql] updated content
    [2013-03-27T04:58:22+00:00] INFO: template[/etc/mysql_grants.sql] owner changed to 0
    [2013-03-27T04:58:22+00:00] INFO: template[/etc/mysql_grants.sql] group changed to 0
    [2013-03-27T04:58:22+00:00] INFO: template[/etc/mysql_grants.sql] mode changed to 600
    [2013-03-27T04:58:22+00:00] INFO: template[/etc/mysql_grants.sql] sending run action to execute[mysql-install-privileges] (immediate)
    [2013-03-27T04:58:22+00:00] INFO: Processing execute[mysql-install-privileges] action run (mysql::server line 195)
    [2013-03-27T04:58:22+00:00] INFO: execute[mysql-install-privileges] ran successfully
    [2013-03-27T04:58:22+00:00] INFO: Processing execute[mysql-install-privileges] action nothing (mysql::server line 195)
    [2013-03-27T04:58:22+00:00] INFO: Chef Run complete in 61.995329034 seconds
    [2013-03-27T04:58:22+00:00] INFO: Running report handlers
    [2013-03-27T04:58:22+00:00] INFO: Report handlers complete

You can also verify that MySQL was installed correctly by running the
 following:

    $ vagrant ssh -c "mysql --version"
    mysql  Ver 14.14 Distrib 5.1.67, for redhat-linux-gnu (x86_64) using readline 5.1

Wait a second, though.  You never downloaded the `mysql` cookbook, nor any
of the dependent `openssl` and `build-essential` cookbooks.  That's the magic
of the Berkshelf Vagrant plugin you installed earlier.  The Berkshelf Vagrant
plugin will make sure that any changes you make to your cookbook and all of
your cookbook's dependencies are made available to your virtual machine.
Berkshelf automatically loads all your cookbook dependencies much like
Bundler automatically loads all your gem dependencies.

Where does the Berkshelf Vagrant plugin put the cookbooks it downloads?
You can find them in `~/.berkshelf/cookbooks`

    /Users/misheska/.berkshelf/cookbooks
    ├── build-essential-1.3.4
    ├── mysql-1.3.0
    └── openssl-1.0.2

`~/.berkshelf` is just the default location where Berkshelf stores data
on your local disk.  This location can be altered by setting the environment
variable `BERKSHELF_PATH`.

More to come!
=============
This is just part one of a multi-part series.  So far you've gone through
severl short iteration loops as you evolve the myface cookbook.  In subsequent
installments, we'll go through more iterations, resulting in the final
end product: <https://github.com/reset/myface-cookbook>
